[{"C:\\Users\\blue_\\OneDrive\\바탕 화면\\GitHub\\soso-web\\main\\src\\index.js":"1","C:\\Users\\blue_\\OneDrive\\바탕 화면\\GitHub\\soso-web\\main\\src\\App.js":"2","C:\\Users\\blue_\\OneDrive\\바탕 화면\\GitHub\\soso-web\\main\\src\\reportWebVitals.js":"3","C:\\Users\\blue_\\OneDrive\\바탕 화면\\GitHub\\soso-web\\main\\src\\store\\store.js":"4","C:\\Users\\blue_\\OneDrive\\바탕 화면\\GitHub\\soso-web\\main\\src\\components\\Main.js":"5","C:\\Users\\blue_\\OneDrive\\바탕 화면\\GitHub\\soso-web\\main\\src\\components\\Login.js":"6","C:\\Users\\blue_\\OneDrive\\바탕 화면\\GitHub\\soso-web\\main\\src\\components\\Redirect.js":"7","C:\\Users\\blue_\\OneDrive\\바탕 화면\\GitHub\\soso-web\\main\\src\\components\\Redirect2.js":"8","C:\\Users\\blue_\\OneDrive\\바탕 화면\\GitHub\\soso-web\\main\\src\\components\\Send.js":"9","C:\\Users\\blue_\\OneDrive\\바탕 화면\\GitHub\\soso-web\\main\\src\\components\\ModalStory.js":"10","C:\\Users\\blue_\\OneDrive\\바탕 화면\\GitHub\\soso-web\\main\\src\\components\\InnerPage.js":"11","C:\\Users\\blue_\\OneDrive\\바탕 화면\\GitHub\\soso-web\\main\\src\\components\\Menu.js":"12","C:\\Users\\blue_\\OneDrive\\바탕 화면\\GitHub\\soso-web\\main\\src\\components\\ShareBt.js":"13","C:\\Users\\blue_\\OneDrive\\바탕 화면\\GitHub\\soso-web\\main\\src\\components\\Restart.js":"14","C:\\Users\\blue_\\OneDrive\\바탕 화면\\GitHub\\soso-web\\main\\src\\components\\Refresh.js":"15"},{"size":792,"mtime":1684761601717,"results":"16","hashOfConfig":"17"},{"size":2983,"mtime":1685342813326,"results":"18","hashOfConfig":"17"},{"size":375,"mtime":1684761601837,"results":"19","hashOfConfig":"17"},{"size":8446,"mtime":1685342805998,"results":"20","hashOfConfig":"17"},{"size":1481,"mtime":1684761601701,"results":"21","hashOfConfig":"17"},{"size":53153,"mtime":1684761601700,"results":"22","hashOfConfig":"17"},{"size":8378,"mtime":1684761601707,"results":"23","hashOfConfig":"17"},{"size":1687,"mtime":1684761601709,"results":"24","hashOfConfig":"17"},{"size":89866,"mtime":1685342796440,"results":"25","hashOfConfig":"17"},{"size":6246,"mtime":1684761601704,"results":"26","hashOfConfig":"17"},{"size":46794,"mtime":1684761601698,"results":"27","hashOfConfig":"17"},{"size":78828,"mtime":1684761601703,"results":"28","hashOfConfig":"17"},{"size":5950,"mtime":1684761601716,"results":"29","hashOfConfig":"17"},{"size":3263,"mtime":1684761601712,"results":"30","hashOfConfig":"17"},{"size":2185,"mtime":1684761601710,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1y7gww7",{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75"},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\blue_\\OneDrive\\바탕 화면\\GitHub\\soso-web\\main\\src\\index.js",[],[],"C:\\Users\\blue_\\OneDrive\\바탕 화면\\GitHub\\soso-web\\main\\src\\App.js",["82","83","84"],[],"C:\\Users\\blue_\\OneDrive\\바탕 화면\\GitHub\\soso-web\\main\\src\\reportWebVitals.js",[],[],"C:\\Users\\blue_\\OneDrive\\바탕 화면\\GitHub\\soso-web\\main\\src\\store\\store.js",[],[],"C:\\Users\\blue_\\OneDrive\\바탕 화면\\GitHub\\soso-web\\main\\src\\components\\Main.js",["85","86","87"],[],"import React, { useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport './Main.css';\r\nimport ModalStory from './ModalStory';\r\nimport Menu from './Menu';\r\nimport InnerPage from './InnerPage';\r\n\r\nfunction Main() {\r\n  const [render1, setRender1] = useState(0);\r\n  const navigater = useNavigate();\r\n  const dispatch = useDispatch();\r\n  const isStory = useSelector((state) => state.isStory);\r\n  const userID = useSelector((state) => state.userID);\r\n  // (랜더링 직후) 사용자 쿠키 확인 기능 + 서버로 log 정보 보내는 기능\r\n  useEffect(() => {\r\n    const cookieData = document.cookie.split(';');\r\n    for (let i = 0; i < cookieData.length; i++) {\r\n      if (cookieData[i].indexOf('pl@ter') > -1) {\r\n        dispatch({ type: 'CHANGE_ISSTORY', data: !isStory });\r\n      } else break;\r\n    };\r\n    fetch(`${process.env.REACT_APP_REGISTER_LOG}main`, {\r\n      method: 'GET',\r\n      mode: 'cors',\r\n      cache: 'no-cache',\r\n      credentials: 'same-origin',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    })\r\n      .then(() => {\r\n      })\r\n      .catch((error) => {\r\n      });\r\n    if (userID === null) {\r\n      navigater('/web/login');\r\n    };\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <div className='main_background'>\r\n      <ModalStory></ModalStory>\r\n      <Menu></Menu>\r\n      <InnerPage></InnerPage>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Main;","C:\\Users\\blue_\\OneDrive\\바탕 화면\\GitHub\\soso-web\\main\\src\\components\\Login.js",["88"],[],"import React, { useEffect } from 'react';\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport './Login.css';\r\n\r\nfunction Login() {\r\n    const navigater = useNavigate();\r\n    const dispatch = useDispatch();\r\n    const userID = useSelector((state) => state.userID);\r\n    const isConditions = useSelector((state) => state.isConditions);\r\n    const isIndividual = useSelector((state) => state.isIndividual);\r\n    const isSecondInfo = useSelector((state) => state.isSecondInfo);\r\n\r\n    // (팝업) 모바일 사용 권유\r\n    function SecondInfo() {\r\n        return (\r\n            <React.Fragment>\r\n                <div className={isSecondInfo ? \"isFirstIngo_wrap\" : \"isFirstIngo_fade\"}>\r\n                    <div className='isFirstIngo_outContainer'>\r\n                        <p className='isFirstIngo_title'>모바일로 접속해 주세요.</p>\r\n                        <p className='isFirstIngo_p'>PL@TER는 모바일에 최적화 되어 있어요.</p>\r\n                        <p className='isFirstIngo_p'>PC 등으로 접속 시 오류가 발생할 수 있어요.</p>\r\n                        <div className='isFirstIngo_button_confirm' onClick={() => { dispatch({ type: 'CHANGE_ISSECONDINFO', data: !isSecondInfo }); }}>확인</div>\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    };\r\n\r\n    // (랜더링 직후) 서버로 log 정보 보내는 기능 + 사용자 ID 확인 기능\r\n    useEffect(() => {\r\n        // 사용자 기기 확인 기능\r\n        if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {\r\n        } else {\r\n            dispatch({ type: 'CHANGE_ISSECONDINFO', data: !isSecondInfo });\r\n        };\r\n        fetch(`${process.env.REACT_APP_REGISTER_LOG}login`, {\r\n            method: 'GET',\r\n            mode: 'cors',\r\n            cache: 'no-cache',\r\n            credentials: 'same-origin',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n            .then(() => {\r\n            })\r\n            .catch((error) => {\r\n            });\r\n        if (userID !== null) {\r\n            navigater('/web/main');\r\n        };\r\n    }, [navigater, userID]);\r\n\r\n    // 카카오 로그인 기능\r\n    function loginWithKakao(key, url) {\r\n        window.location.href = `https://kauth.kakao.com/oauth/authorize?response_type=code&client_id=${key}&redirect_uri=${url}`;\r\n    };\r\n\r\n    // 이용약관 기능(표현)\r\n    function toggleConditions() {\r\n        dispatch({ type: 'CHANGE_ISCONDITIONS', data: !isConditions });\r\n    };\r\n\r\n    // 개인정보처리방침 기능(표현)\r\n    function toggleIndividual() {\r\n        dispatch({ type: 'CHANGE_ISINDIVIDUAL', data: !isIndividual });\r\n    };\r\n\r\n    // (팝업) 이용약관\r\n    function Conditions() {\r\n        return (\r\n            <React.Fragment>\r\n                <div className={isConditions ? \"login_conditions_wrap\" : \"login_conditions_wrap_fade\"}>\r\n                    <div className='login_conditions_outContainer'>\r\n                        <div className='login_conditions_img' onClick={toggleConditions}></div>\r\n                        <p className='login_conditions_title'>이용약관</p>\r\n                        <article className='login_conditions_article'>\r\n                            <p>제1조 목적</p>\r\n                            <p>본 약관은 소소한 프로젝트(이하 ‘제공자’)가 제공하는 서비스(회원이 PC, 모바일 등의 각종 디지털 기기 또는 프로그램을 통하여 이용할 수 있도록 제공자가 제공하는 모든 서비스 의미)를 이용하는데 필요한 제공자와 회원 간의 절차 및 이용조건, 권리, 의무 및 책임사항 등 기타 필요한 사항들을 규정함을 목적으로 합니다.</p>\r\n                            <p>제2조 약관의 명시 및 효력</p>\r\n                            <article>\r\n                                <p>1. 본 약관의 내용은 제공자가 제공하는 모든 서비스에 게시하여 공시합니다.</p>\r\n                                <p>2. 제공자는 필요한 경우 관련 법령을 위배하지 않는 범위 내에서 본 약관을 변경할 수 있습니다. 제공자는 약관이 변경되는 경우에 변경된 약관의 내용과 시행일을 정하여 시행일 최소 7일 이전부터 시행일 후 상당한 기간 동안 공지하고, 기존 회원에게는 변경된 약관과 적용일자를 공식 홈페이지, 서비스 내 알림 등 합리적이고 수용 가능한 방법으로 변경사항을 공지 또는 통지합니다.</p>\r\n                                <p>3. 회원은 변경된 약관에 동의하지 않을 권리가 있으며, 시행일로부터 7일 이내 변경된 약관에 대해 전자메일, 공식 홈페이지 문의 등 합리적인 방법으로 거절의 의사를 표시하지 않았을 때는 본 약관에 동의한 것으로 간주합니다.</p>\r\n                            </article>\r\n                            <p>제3조 약관 외 준칙</p>\r\n                            <p>제공자는 본 이용약관 및 개별 서비스의 운영정책(이하 ‘운영정책’)을 정할 수 있으며, 본 약관에서 규정된 내용이 개별 서비스 약관에서 정한 운영정책과 충돌하는 경우 개별 서비스의 약관 규정을 우선하여 적용합니다. 본 약관에 규정되지 않은 사항에 대해서는 별도의 운영정책, 제공자의 공지, 이용안내, 상·관행, 관계법령에서 정한 바를 따릅니다.</p>\r\n                            <p>제4조 서비스의 구분</p>\r\n                            <article>\r\n                                <p>1. 제공자가 회원에게 제공하는 무료 서비스, 유료 서비스, 개별 서비스 등 모든 서비스를 ‘서비스’라고 칭합니다.</p>\r\n                                <p>2. 무료 서비스, 유료 서비스 등의 종류와 이용방법 등은 이 약관 및 제공자가 공지 또는 이용안내에서 별도로 정하는 바에 따릅니다.</p>\r\n                            </article>\r\n                            <p>제5조 이용계약의 성립</p>\r\n                            <p>1. 제공자가 지정하는 타 서비스 계정(카카오 등)을 활용하여 본 서비스의 계정을 생성할 수 있습니다. 제공자는 가입신청자의 신청에 대하여 서비스 이용 승낙을 원칙으로 합니다. 이용 승낙을 통해 서비스를 자유롭게 이용할 수 있습니다.</p>\r\n                            <p>제6조 계정 생성 거절 및 승낙 보류</p>\r\n                            <article>\r\n                                <p>1. 제공자는 아래와 같은 경우 이용계약을 거절 및 철회할 수 있습니다.</p>\r\n                                <article>\r\n                                    <p>가. 타인 명의의 전자메일 주소 및 개인정보를 이용하여 계정을 생성한 경우</p>\r\n                                    <p>나. 회원의 귀책사유로 이용 승낙이 곤란한 경우</p>\r\n                                </article>\r\n                                <p>2. 제공자는 전항의 각호에 사유가 해당하는 경우, 즉시 사용자의 서비스 이용을 중단하거나 계정을 삭제하는 등 적절한 서비스 제한을 할 수 있습니다.</p>\r\n                                <p>3. 제공자는 아래와 같은 경우에 이용계약을 보류할 수 있습니다.</p>\r\n                                <article>\r\n                                    <p>가. 제공 서비스 설비 용량에 현실적인 여유가 없는 경우</p>\r\n                                    <p>나. 서비스 제공을 위한 기술적인 부분에 문제가 있다고 판단되는 경우</p>\r\n                                    <p>다. 기타 제공자가 재정적, 기술적으로 사용 제한이 필요하다고 인정하는 경우</p>\r\n                                </article>\r\n                            </article>\r\n                            <p>제7조 아이디 부여 및 관리</p>\r\n                            <article>\r\n                                <p>1. 제공자는 회원에게 임의의 아이디를 부여합니다.</p>\r\n                                <p>2. 회원이 생성한 아이디는 변경할 수 없음을 원칙으로 합니다.</p>\r\n                                <p>3. 회원이 생성한 계정의 정보는 회원 본인만 이용할 수 있으며, 다른 사람이 계정 정보를 사용하여 동일한 계정의 서비스를 이용할 수 없습니다. 회원 본인을 제외한 다른 사람이 계정을 무단으로 사용할 수 없도록 비밀번호는 회원이 직접 관리하여야 합니다.</p>\r\n                                <p>4. 서비스 내 프로필 관리 메뉴를 통하여 개인정보를 열람하고 수정할 수 있습니다. 다만, 서비스의 제공 및 관리를 위해 아이디 등 일부 정보는 수정이 불가능합니다. 서비스 이용 신청 시 카카오가 제공한 내용에 변동이 있을 땐 이를 직접 수정하여야 합니다.</p>\r\n                            </article>\r\n                            <p>제8조 제공자의 의무</p>\r\n                            <p>1. 제공자는 회원으로부터 제기되는 의견 및 불만사항이 정당하다고 인정할 경우 즉시 처리하고, 즉시 처리가 곤란한 경우에는 회원에게 그 사유와 처리 일정을 안내해야 합니다.</p>\r\n                            <p>2. 제공자는 지속적이고 안정적인 서비스의 제공을 위하여 설비에 장애가 생기거나 멸실 된 때에는 지체 없이 수리 또는 복구해야 하며, 아래 각 호의 사유 발생 시 부득이한 경우 예고 없이 서비스의 전부 또는 일부의 제공을 일시 중지할 수 있습니다. 그 경우 사유 및 중지 기간 등을 회원에게 사후 공지합니다.</p>\r\n                            <article>\r\n                                <p>가. 제공자가 긴급한 시스템 점검, 증설, 교체, 시설의 보수 또는 공사를 위해 부득이한 경우</p>\r\n                                <p>나. 새로운 서비스 시스템으로의 교체 등을 위하여 제공자가 필요하다고 판단한 경우</p>\r\n                                <p>다. 시스템 또는 기타 서비스의 설비와 장애, 유무선 네트워크 장애 등으로 정상적인 서비스 제공이 불가능한 경우</p>\r\n                                <p>라. 천재지변, 국가비상사태, 정전 등 제공자가 통제할 수 없는 불가항력적 사유가 발생한 경우</p>\r\n                            </article>\r\n                            <p>제9조 개인정보보호</p>\r\n                            <p>제공자는 회원들의 개인정보를 중요시하며, 정보통신망 이용촉진 및 정보보호 등에 관한 법률, 개인정보보호법, 전기통신사업법 등 관련 법규를 준수하고 있습니다. 제공자는 회원이 제공한 개인정보가 어떠한 용도와 방식으로 이용되고 있으며 개인정보보호를 위해 어떤 조치가 취해지고 있는지 알려드립니다.</p>\r\n                            <p>제10조 회원의 의무</p>\r\n                            <p>1. 회원가입 시 허위 또는 타인의 정보를 등록한 경우 제공자에 대하여 서비스 일체의 권리를 주장할 수 없으며, 제공자는 이로 인하여 발생하는 손해에 대하여 책임을 부담하지 않습니다.</p>\r\n                            <p>2. 회원은 본 약관에서 규정하는 사항과 기타 제공자가 정한 제반 규정 및 공지사항을 준수하여야 합니다. 회원은 제공자의 업무에 방해가 되는 행위, 제공자의 명예를 손상시키는 행위를 해서는 안 됩니다.</p>\r\n                            <p>3. 회원은 청소년보호법 등 관계법령을 준수하여야 합니다. 회원이 청소년보호법 등 관계법령을 위반하는 경우 해당 법령에 의거하여 처벌을 받을 수 있고, 제공자는 이를 책임지지 않습니다.</p>\r\n                            <p>4. 회원은 회원의 아이디와 비밀번호를 직접 관리해야 합니다. 관리 소홀로 발생한 문제는 제공자가 책임지지 않습니다.</p>\r\n                            <p>5. 회원은 이름, 기타 서비스 내에서 사용되는 명칭을 아래에 해당하는 내용으로 사용하여서는 안 됩니다.</p>\r\n                            <article>\r\n                                <p>가.서비스 공식 운영자를 사칭하거나 유사한 명칭을 사용하여 혼란을 초래하는 행위</p>\r\n                                <p>나. 선정적이고 음란한 내용이 포함된 명칭의 사용</p>\r\n                                <p>다. 제3자의 상표권, 저작권 등 권리를 침해할 가능성이 있는 명칭의 사용</p>\r\n                                <p>라. 비어, 속어라고 판단되거나 반사회적이고 관계법령에 저촉되는 내용이 포함된 명칭의 사용</p>\r\n                            </article>\r\n                            <p>6. 회원은 서비스의 이용권한, 기타 계약상의 지위를 타인에게 매도 및 증여할 수 없으며 무형자산을 담보로 제공할 수 없습니다.</p>\r\n                            <p>7. 회원은 제공자에서 제공하는 서비스의 본래의 목적 이외의 용도로 사용해서는 안 됩니다. 아래 해당하는 경우 서비스 이용을 제한하거나 계정 삭제, 수사기관의 고발조치 등 제재를 가할 수 있습니다.</p>\r\n                            <article>\r\n                                <p>가. 회원가입 또는 변경 시 허위정보를 기재하는 행위</p>\r\n                                <p>나. 타인의 개인정보를 도용하거나 부정하게 사용하는 행위</p>\r\n                                <p>다. 회원의 계정을 타인에게 매매하는 행위</p>\r\n                                <p>라. 제공자의 운영진 또는 직원을 사칭하는 행위</p>\r\n                                <p>마. 제공자의 서버 해킹 및 클라이언트 프로그램을 변경하는 행위</p>\r\n                                <p>바. 제공자 서비스의 버그를 악용하는 행위</p>\r\n                                <p>사. 제공자의 사전 승낙 없이 영업활동으로 사용하는 행위</p>\r\n                                <p>아. 다른 회원을 위협, 희롱, 고통, 피해, 불편을 주는 행위</p>\r\n                                <p>자. 제공자의 승낙 및 권한 없이 제공자 서비스 관련 프로그램을 배포하거나 사용을 권장하는 행위</p>\r\n                                <p>차. 제공자의 서비스에 고의적으로 방해하는 일체의 행위</p>\r\n                                <p>카. 제공자의 서비스를 통하여 얻은 정보를 제공자의 사전 승낙 없이 복제, 출판, 방송, 광고, 제3자에게 제공하는 행위</p>\r\n                                <p>타. 공공질서 및 미풍양속에 위반되는 행위를 지속하거나 음란한 내용의 정보, 문장, 음향, 동영상, 이미지 등을 유포하는 행위</p>\r\n                                <p>파. 본 약관을 포함하여 기타 제공자가 정한 제반규정 또는 이용조건을 위반하는 행위 및 기타 관계 법령에 위배되는 행위</p>\r\n                            </article>\r\n                            <p>제11조 서비스의 제한 및 제공중단</p>\r\n                            <p>1. 제공자는 천재지변, 전시 등 이에 준하는 국가비상사태가 발생하거나 발생할 우려가 있는 경우와 전기통신사업법에 의한 기간통신사업자가 전기통신서비스를 중지하는 등 부득이한 사유가 있는 경우에는 서비스의 전부 또는 일부를 제한하거나 중지할 수 있습니다.</p>\r\n                            <p>2. 제공자가 제공하는 무료 서비스는 제공자의 경영정책 등의 사유로 서비스의 전부 또는 일부가 제한되거나 중지될 수 있으며, 유료로 전환될 수 있습니다.</p>\r\n                            <p>3. 제공자는 서비스의 이용을 제한하거나 정지하는 때와 무료 서비스를 유료로 전환하는 때에는 그 사유 및 제한기간, 예정일시 등을 지체 없이 사전 또는 사후에 회원에게 안내합니다.</p>\r\n                            <p>4. 제공자는 최종 사용일로부터 연속하여 1년 동안 서비스 사용 이력이 없는 경우 \"정보통신망 이용촉진 및 정보보호에 관한 법률\"의 규정에 의하여 회원정보 및 계정을 영구적으로 삭제할 수 있습니다. 단, 유료 결제 상품을 보유하고 있을 경우 삭제 대상에서 제외되며 관련 법령의 규정에 의하여 보존할 필요가 있는 경우 제공자는 관계법령에서 정한 일정기간 동안 회원정보를 보관합니다.</p>\r\n                            <p>5. 제공자는 회원이 유료 서비스의 결제 요금 등을 지정한 기일로부터 1개월 이상 납부하지 않을 경우에는 전부 또는 일부의 서비스 제공을 중단할 수 있습니다.</p>\r\n                            <p>6. 제공자는 회원이 아래에 해당하는 경우 회원의 서비스 이용을 일부 또는 전부 제한할 수 있습니다. 회원의 이용을 제한하는 경우, 제한의 종류 및 기간 등 구체적인 기준은 제공자의 공지 및 이용안내 등에서 별도로 정하는 바에 따릅니다.</p>\r\n                            <article>\r\n                                <p>가. 다량의 정보를 전송하여 서비스의 안정적 운영을 방해하는 경우</p>\r\n                                <p>나. 수신자의 의사에 반하는 광고성 정보, 욕설, 성희롱 등 지속적으로 전송하는 경우</p>\r\n                                <p>다. 정보통신설비의 오작동이나 정보의 파괴를 유발하는 컴퓨터 바이러스 프로그램 등을 유포하는 경우</p>\r\n                                <p>라. 제3자의 지적재산권을 침해하는 경우</p>\r\n                                <p>마. 다른 회원의 아이디를 부정하게 사용하는 경우</p>\r\n                                <p>바. 전기통신관련법령 등을 위반하는 행위를 하는 경우</p>\r\n                            </article>\r\n                            <p>7. 회원은 이용 정지의 통지에 대하여 이의가 있을 때에는 이의신청을 할 수 있습니다. 이용제한을 해제하고자 하는 때에는 그 사유, 일시 및 기간 등을 상세하게 작성하여 고객센터 전자메일로 접수할 수 있습니다.</p>\r\n                            <p>8. 제공자는 이용정지 기간 중에라도 이용정지 사유가 해소된 것이 확인된 경우에는 이용정지조치를 즉시 해제할 수 있습니다.</p>\r\n                            <p>9. 제공자는 회원의 과실이 없었음을 입증된 경우에는 회원이 이용 중인 유료 상품에 대한 이용기간을 정지된 기간만큼 연장해주도록 합니다.</p>\r\n                            <p>제12조 서비스의 탈퇴 및 청약철회</p>\r\n                            <p>1. 서비스의 이용을 더 이상 원하지 않을 경우 언제든지 서비스 내 탈퇴하기 메뉴를 이용하여 서비스 이용계약의 청약철회(회원탈퇴)를 요청할 수 있습니다. 단, 유료 서비스를 이용하는 회원이 탈퇴할 경우, 유료 서비스 잔여 아이템 및 관련 콘텐츠는 제공자에 귀속됩니다.</p>\r\n                            <p>2. 이용계약이 해지되면 법령 및 개인정보 취급방침에 따라 회원정보를 보유하는 경우를 제외하고는 회원정보나 작성한 게시물 등 모든 데이터는 삭제됩니다. 다만, 작성한 게시물이 제3자에 의하여 스크랩 또는 다른 공유 기능으로 게시되거나, 제3자의 게시물에 댓글 등 게시물을 추가하는 등의 경우에는 다른 회원의 정상적 서비스 이용을 위하여 필요한 범위 내에서 서비스 내에 삭제되지 않고 남아 있게 됩니다.</p>\r\n                            <p>3. 유료 서비스를 이용하는 회원은 관련법령에 따라 청약철회 등을 할 수 있고, 이에 대하여 유료 서비스약관을 참조하시기 바랍니다.</p>\r\n                            <p>제13조 손해배상</p>\r\n                            <p>1. 제공자는 법령상 허용되는 한도 내에서 서비스와 관련하여 본 약관에 명시되지 않은 어떠한 구체적인 사항에 대한 약정이나 보증을 하지 않습니다.</p>\r\n                            <p>2. 제공자는 회원이 작성하는 등의 방법으로 서비스에 게재된 정보, 자료, 사실의 신뢰도, 정확성 등에 대해서는 보증을 하지 않으며 이로 인해 발생한 여러분의 손해에 대하여는 책임을 부담하지 않습니다.</p>\r\n                            <p>3. 제공자는 천재지변 또는 이에 준하는 불가항력으로 인하여 서비스를 제공할 수 없는 경우에는 서비스 제공에 관한 책임이 면제됩니다. 또한 제공자는 법률상 허용되는 한도 내에서 간접 손해, 특별 손해, 결과적 손해, 징계적 손해, 및 징벌적 손해에 대한 책임을 부담하지 않습니다.</p>\r\n                            <article>\r\n                                <p>가. 천재지변 또는 이에 준하는 불가항력의 상태에서 발생한 손해</p>\r\n                                <p>나. 여러분의 귀책사유로 서비스 이용에 장애가 발생한 경우</p>\r\n                                <p>다. 서비스에 접속 또는 이용과정에서 발생하는 개인적인 손해</p>\r\n                                <p>라. 제3자가 불법적으로 제공자의 서버에 접속하거나 서버를 이용함으로써 발생하는 손해</p>\r\n                                <p>마. 제3자가 제공자 서버에 대한 전송 또는 제공자 서버로부터의 전송을 방해함으로써 발생하는 손해</p>\r\n                                <p>바. 제3자가 악성 프로그램을 전송 또는 유포함으로써 발생하는 손해</p>\r\n                                <p>사. 전송된 데이터의 생략, 누락, 파괴 등으로 발생한 손해, 명예훼손 등 제3자가 서비스를 이용하는 과정에서 발생된 손해</p>\r\n                                <p>아. 기타 제공자의 고의 또는 과실이 없는 사유로 인해 발생한 손해</p>\r\n                                <p>자. 서비스의 특성상 발생할 수 있는 손해 중 제공자가 이를 예방하기 위한 조치를 취함에도 불구하고 발생한 손해</p>\r\n                                <p>차. 서비스의 특성상 발생할 수 있는 손해 중 사회통념 외적으로 발생한 손해</p>\r\n                            </article>\r\n                            <p>4. 제공자는 제공자의 중대한 귀책사유로 유료서비스를 제공하지 못 하는 경우, 공정거래위원회가 고시한 소비자분쟁해결기준에 따라 보상합니다.</p>\r\n                            <p>제14조 면책</p>\r\n                            <p>1. 제공자는 회원에게 서비스 제공으로부터 기대되는 수익 또는 이익을 얻지 못하는 부분과 관련하여 책임을 지지 않습니다.</p>\r\n                            <p>2. 제공자는 제3자가 게시 또는 전송한 콘텐츠 및 자료로 인하여 회원에게 발생한 손해에 대하여 책임을 지지 않습니다.</p>\r\n                            <p>3. 제공자는 회원 상호 간 또는 회원과 제3자 간의 서비스를 매개로 발생한 분쟁에 대하여 개입할 의무 및 손해를 배상할 책임을 지지 않습니다.</p>\r\n                            <p>4. 제공자는 광고주의 판촉활동에 회원이 참여하거나, 거래의 결과로서 발생하는 손실 또는 손해에 대해서는 책임을 지지 않습니다.</p>\r\n                            <p>5. 관계법령의 변경, 천재지변 또는 이에 준하는 불가항력으로 인하여 서비스를 제공할 수 없는 경우 서비스 제공에 관한 책임이 면제됩니다.</p>\r\n                            <p>6. 회원이 서비스에 게재한 정보, 자료, 사실의 신뢰도, 정확성 등의 내용 일체에 관여하는 책임을 지지 않습니다.</p>\r\n                            <p>제15조 콘텐츠 및 게시물 등의 관리</p>\r\n                            <p>1. 제공자는 건전한 온라인 통신 문화 및 효율적인 서비스 운영을 위하여 게시물 삭제, 비공개, 등록거부, 이동 등 적절한 조치를 취할 수 있습니다.</p>\r\n                            <p>2. 제공자는 회원이 등록한 게시물이 제3자로부터 명예훼손, 지적재산권 등 권리침해를 이유로 게시중단 요청을 받을 경우 임시로 게시 중단할 수 있으며, 게시중단 요청자와 게시물 등록자 간의 소송 및 합의 기타 이에 준하는 관련기관의 결정 등이 제공자에 접수될 경우 이에 따릅니다.</p>\r\n                            <p>제16조 서비스 제공 및 이용</p>\r\n                            <p>1. 제공자는 인터넷과 모바일로 이용할 수 있는 다양한 서비스를 제공합니다. 스마트폰의 애플리케이션 스토어 등에서 서비스를 다운로드해 설치하거나 PC 또는 모바일 웹브라우저를 통하여 접속하여 서비스를 이용할 수 있습니다.</p>\r\n                            <p>2. 제공자는 다양한 서비스를 시시각각 제공하기 때문에 서비스의 자세한 내용은 별도로 안내합니다. 개별적인 서비스 이용방법을 애플리케이션 스토어 및 공지사항에서 상세하게 안내하고 회원은 언제든지 확인이 가능합니다.</p>\r\n                            <p>3. 제공자는 서비스를 자유롭게 이용할 수 있도록 이에 필요한 소프트웨어를 제공합니다. 단, 제공한 소프트웨어는 제공자 소유의 무상의 라이선스를 회원에게 제공합니다. 따라서 회원이 타인에게 해당 소프트웨어 및 라이선스를 전 세계를 대상으로 개인적인 양도는 불가능합니다. 제공자의 상표 및 로고를 사용할 권리를 부여하지는 않습니다.</p>\r\n                            <p>4. 제공자는 더 나은 서비스를 위하여 필요한 소프트웨어의 업데이트 버전을 제공할 수 있습니다. 소프트웨어의 업데이트에는 중요한 기능의 추가 또는 불필요한 기능의 제거 등이 포함되어 있습니다. 회원은 원활한 서비스 이용을 위하여 꾸준히 서비스 업데이트를 하여야 합니다.</p>\r\n                            <p>5. 제공자는 서비스의 이용과 관련된 각종 약관 및 공지 내용을 서비스 내 개별 메뉴를 통하여 노출하는 방식으로 안내합니다.</p>\r\n                            <p>6. 서비스 이용 과정에서 발생하는 데이터 통신요금은 회원의 개인 비용으로 회원의 책임 하에 이동통신사에 납부 하셔야 합니다. 데이터 통신요금에 대한 자세한 안내는 가입하신 이동통신사에 문의하시기 바랍니다.</p>\r\n                            <p>제17조 서비스 이용 방법 및 주의점</p>\r\n                            <p>1. 잘못된 방법으로 서비스의 제공을 방해하거나 제공자가 안내하는 방법 이외의 다른 방법을 사용하여 서비스에 접근할 수 없습니다.</p>\r\n                            <p>2. 회원정보를 무단으로 수집, 이용하거나 다른 사람들에게 제공하는 행위, 서비스를 영리 목적으로 이용하는 것, 음란 정보나 저작권 침해 정보 등 사회질서 및 법령에 위반되는 내용의 정보 등을 발송하거나 게시하는 행위도 금지됩니다.</p>\r\n                            <p>3. 제공자의 동의 없이 서비스 또는 이에 포함된 소프트웨어의 일부를 복사, 수정, 배포, 판매, 양도, 대여, 담보제공하거나 타인에게 그 이용을 허락하는 행위와 소프트웨어를 역설계하거나 소스 코드의 추출을 시도하는 등 서비스를 복제, 분해 또는 모방하거나 기타 변형하는 행위도 금지됩니다.</p>\r\n                            <p>4. 서비스의 이용권한, 기타 이용 계약상 지위를 타인에게 양도 및 증여할 수 없으며, 담보로 제공할 수 없습니다.</p>\r\n                            <p>5. 제공자의 모든 약관 또는 정책 및 관련 법령을 준수하지 않는다면, 제공자는 여러분의 위반행위 등을 조사하거나 여러분의 서비스 이용을 잠시 또는 계속하여 중단하거나, 회원탈퇴 및 재가입에 제한을 둘 수 있습니다.</p>\r\n                            <p>6. 제공자는 법령에서 정하는 기간 동안 회원이 서비스를 이용하기 위해 로그인 혹은 접속한 기록이 없는 경우 서비스 내 별도의 안내 방법으로 통지 후 여러분의 정보를 파기하거나 분리 보관할 수 있습니다.</p>\r\n                            <p>7. 서비스 이용을 위한 필수적인 정보가 부족할 경우 이용계약이 중도 해지될 수 있습니다.</p>\r\n                            <p>제19조 권리의 귀속 및 저작물의 이용</p>\r\n                            <p>1. 회원은 글, 정보, 서비스 또는 제공자에 대한 의견이나 제안 등 콘텐츠(이하 ‘게시물’)를 서비스에 직접 게시할 수 있으며, 게시물 및 제휴 계약에 따라 제공된 저작물 등의 지적재산권은 작성자에게 있습니다. 제공자에서는 게시된 게시물이 타인의 지적재산권을 포함한 법률 기타 제3자의 권리침해 게시물인 사실을 확인한 경우 이를 사전 예고 없이 비공개 및 삭제하는 등의 조치를 취할 수 있는 권리를 보유합니다.</p>\r\n                            <p>2. 게시물 업로드 시 부적절한 방법으로 시도하거나 타인의 권리침해 등의 서비스를 방해할 경우, 회원 계정에 대해 경고, 비공개, 일시 또는 영구 이용정지, 탈퇴/재가입 차단 등 회원에게 예고 없이 운영상 제재를 즉시 가할 수 있습니다.</p>\r\n                            <p>3. 게시한 게시물의 모든 문제에 대해서는 게시자가 책임을 부담하게 됩니다. 또한, 음란하거나 폭력적이거나 기타 사회질서 및 법령에 위반하는 게시물을 공개 또는 게시할 수 없습니다.</p>\r\n                            <p>4. 제공자는 게시물이 법령 및 서비스 정책에 위반된다고 판단할 경우, 즉시 비공개 및 삭제하거나 게시를 거부할 수 있습니다.</p>\r\n                            <p>5. 다른 회원의 게시물을 공유 및 외부에 사용하기 위해서는 게시물 소유자에게 별도로 허락을 받아야 합니다.</p>\r\n                            <p>제20조 법정대리인의 권리</p>\r\n                            <p>제공자는 만 19세 미만의 미성년 회원이 유료 서비스를 이용하고자 하는 경우에 부모 등 법정 대리인의 동의를 얻거나, 계약 체결 후 추인을 얻지 않으면 미성년자 본인 또는 법정대리인이 그 계약을 취소할 수 있다는 내용을 고지하는 조치를 취합니다.</p>\r\n                            <p>제21조 청소년보호책임</p>\r\n                            <p>제공자가 제공하는 서비스는 모든 연령대가 자유롭게 이용할 수 있는 공간으로 유해 정보로부터 청소년을 보호하고 청소년의 안전한 인터넷 사용을 돕기 위해 정보통신망법에서 정한 청소년보호정책을 별도로 시행하고 있으며, 구체적인 내용은 PL@TER HELP CENTER (https://elfin-shelf-a6a.notion.site/PL-TER-83d6a7213845476f84c780d863591e90)에서 확인할 수 있습니다.</p>\r\n                            <p>제22조 서비스의 변경 및 종료</p>\r\n                            <p>1. 제공자는 서비스를 24시간, 365일 제공하기 위하여 최선의 노력합니다.</p>\r\n                            <p>2. 제공자는 장비의 유지∙보수를 위한 정기 또는 임시 점검 또는 다른 이유로 서비스의 제공이 일시 중단될 수 있으며, 관련된 공지는 서비스 내 공지합니다. 단, 제공자도 예측할 수 없는 이유로 서비스가 중단된 때에는 제공자가 상황을 파악하는 즉시 최대한 빠른 시일 내에 서비스를 복구하고, 관련 내용을 서비스 복구 후 공지하도록 노력합니다.</p>\r\n                            <p>3. 제공자의 서비스 제공을 위해 계약한 제3자 업체와의 계약 종료 및 변경, 신규 서비스 개시 등의 사유로 서비스의 내용이 변경되거나, 서비스가 종료될 수도 있습니다. 서비스 변경 사항 또는 종료는 서비스 내 공지사항 등으로 공지합니다.</p>\r\n                            <p>제23조 준거법 및 재판관할</p>\r\n                            <p>1. 본 약관과 관련된 사항에 대하여 대한민국 준거법으로 합니다.</p>\r\n                            <p>2. 제공자와 회원 간에 발생한 분쟁에 관한 소송은 민사소송법상의 관할법원에 제소합니다.</p>\r\n                            <p>제24조 고지의 의무</p>\r\n                            <p>본 이용약관 내용 추가, 삭제 및 수정이 있을 시에는 개정 최소 7일전부터 서비스 내 공지를 통하여 고지할 것입니다.</p>\r\n                            <p>- 공고일자: 2023년 04월 01일</p>\r\n                            <p>- 시행일자: 2023년 04월 01일</p>\r\n                            <br></br>\r\n                        </article>\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    };\r\n\r\n    // (팝업) 개인정보처리방침\r\n    function Individual() {\r\n        return (\r\n            <React.Fragment>\r\n                <div className={isIndividual ? \"login_conditions_wrap\" : \"login_conditions_wrap_fade\"}>\r\n                    <div className='login_conditions_outContainer'>\r\n                        <div className='login_conditions_img' onClick={toggleIndividual}></div>\r\n                        <p className='login_conditions_title'>개인정보처리방침</p>\r\n                        <article className='login_conditions_article'>\r\n                            <p>〈소소한 프로젝트〉('plater.kr'이하 'PL@TER')는 「개인정보 보호법」 제30조에 따라 정보주체의 개인정보를 보호하고 이와 관련한 고충을 신속하고 원활하게 처리할 수 있도록 하기 위하여 다음과 같이 개인정보 처리방침을 수립·공개합니다.</p>\r\n                            <p>○ 이 개인정보처리방침은 2023년 4월 1부터 적용됩니다.</p>\r\n                            <p>제1조(개인정보의 처리 목적)</p>\r\n                            <p>〈소소한 프로젝트〉('plater.kr'이하 'PL@TER')는 다음의 목적을 위하여 개인정보를 처리합니다. 처리하고 있는 개인정보는 다음의 목적 이외의 용도로는 이용되지 않으며 이용 목적이 변경되는 경우에는 「개인정보 보호법」 제18조에 따라 별도의 동의를 받는 등 필요한 조치를 이행합니다.</p>\r\n                            <p>① 서비스 회원가입 및 관리</p>\r\n                            <p>회원제 서비스 제공에 따른 본인 식별·인증, 서비스 부정이용 방지 목적으로 개인정보를 처리합니다.</p>\r\n                            <p>② 재화 또는 서비스 제공</p>\r\n                            <p>서비스 제공을 목적으로 개인정보를 처리합니다.</p>\r\n                            <p>제2조(개인정보의 처리 및 보유 기간)</p>\r\n                            <p>① 〈소소한 프로젝트〉는 법령에 따른 개인정보 보유·이용기간 또는 정보주체로부터 개인정보를 수집 시에 동의 받은 개인정보 보유·이용기간 내에서 개인정보를 처리·보유합니다.</p>\r\n                            <p>② 각각의 개인정보 처리 및 보유 기간은 다음과 같습니다.</p>\r\n                            <p>1. 개인정보는 수집·이용에 관한 동의일로부터까지 위 이용목적을 위하여 보유·이용됩니다.</p>\r\n                            <article>\r\n                                <p>1) 보유근거: 정보통신망 이용촉진 및 정보보호 등에 관한 법률 제29조 단서</p>\r\n                                <p>2) 관련법령: 표시/광고에 관한 기록: 1년</p>\r\n                                <p>3) 예외사유: 이용약관 및 운영원칙에 위배되는 행위가 적발된 회원의 개인정보는 3년간 보존</p>\r\n                            </article>\r\n                            <p>제3조(처리하는 개인정보의 항목)</p>\r\n                            <p>① 〈소소한 프로젝트〉는 다음의 개인정보 항목을 처리하고 있습니다.</p>\r\n                            <p>1. 서비스 회원가입 및 관리</p>\r\n                            <p>1) 필수항목: 서비스 이용 기록, 접속 로그, 쿠키, 별명</p>\r\n                            <p>2. 재화 또는 서비스 제공</p>\r\n                            <p>1) 필수항목: 서비스 이용 기록, 접속 로그, 쿠키, 별명</p>\r\n                            <p>제4조(만 14세 미만 아동의 개인정보 처리에 관한 사항)</p>\r\n                            <p>① 만 14세 미만 아동에 대해 개인정보를 수집할 때 서비스 수행에 필요한 최소한의 개인정보만을 수집합니다.</p>\r\n                            <p>② 만 14세 미만 아동의 개인정보를 수집할 때에는 아동에게 법정대리인의 성명, 연락처와 같이 최소한의 정보를 요구할 수 있으며, 다음 중 하나의 방법으로 적법한 법정대리인이 동의하였는지를 확인할 수 있습니다.</p>\r\n                            <article>\r\n                                <p>1. 동의 내용을 게재한 인터넷 사이트에 법정대리인이 동의 여부를 표시하도록 하고 개인정보처리자가 그 동의 표시를 확인했음을 법정대리인의 휴대전화 문자 메시지로 알리는 방법</p>\r\n                                <p>2. 동의 내용을 게재한 인터넷 사이트에 법정대리인이 동의 여부를 표시하도록 하고 법정대리인의 신용카드·직불카드 등의 카드정보를 제공받는 방법</p>\r\n                                <p>3. 동의 내용을 게재한 인터넷 사이트에 법정대리인이 동의 여부를 표시하도록 하고 법정대리인의 휴대전화 본인인증 등을 통해 본인 여부를 확인하는 방법</p>\r\n                                <p>4. 동의 내용이 적힌 서면을 법정대리인에게 직접 발급하거나, 우편 또는 팩스를 통하여 전달하고 법정대리인이 동의 내용에 대하여 서명날인 후 제출하도록 하는 방법</p>\r\n                                <p>5. 동의 내용이 적힌 전자우편을 발송하여 법정대리인으로부터 동의의 의사표시가 적힌 전자우편을 전송받는 방법</p>\r\n                                <p>6. 전화를 통하여 동의 내용을 법정대리인에게 알리고 동의를 얻거나 인터넷주소 등 동의 내용을 확인할 수 있는 방법을 안내하고 재차 전화 통화를 통하여 동의를 얻는 방법</p>\r\n                                <p>7. 그 밖에 위와 준하는 방법으로 법정대리인에게 동의 내용을 알리고 동의의 의사표시를 확인하는 방법</p>\r\n                            </article>\r\n                            <p>제5조(개인정보의 파기절차 및 파기방법)</p>\r\n                            <p>① 〈소소한 프로젝트〉는 개인정보 보유기간의 경과, 처리목적 달성 등 개인정보가 불필요하게 되었을 때에는 지체 없이 해당 개인정보를 파기합니다.</p>\r\n                            <p>② 정보주체로부터 동의 받은 개인정보 보유기간이 경과하거나 처리목적이 달성되었음에도 불구하고 다른 법령에 따라 개인정보를 계속 보존하여야 하는 경우에는, 해당 개인정보를 별도의 데이터베이스(DB)로 옮기거나 보관 장소를 달리하여 보존합니다.</p>\r\n                            <p>③ 개인정보 파기의 절차 및 방법은 다음과 같습니다.</p>\r\n                            <article>\r\n                                <p>1. 파기절차</p>\r\n                                <p>〈소소한 프로젝트〉는 파기 사유가 발생한 개인정보를 선정하고, 〈소소한 프로젝트〉의 개인정보 보호책임자의 승인을 받아 개인정보를 파기합니다.</p>\r\n                                <p>2. 파기방법</p>\r\n                                <p>전자적 파일 형태의 정보는 기록을 재생할 수 없는 기술적 방법을 사용합니다.</p>\r\n                            </article>\r\n                            <p>제6조(미이용자의 개인정보 파기 등에 관한 조치)</p>\r\n                            <p>① 〈소소한 프로젝트〉는 1년간 서비스를 이용하지 않은 이용자의 정보를 파기하고 있습니다. 다만, 다른 법령에서 정한 보존기간이 경과할 때까지 다른 이용자의 개인정보와 분리하여 별도로 저장·관리할 수 있습니다.</p>\r\n                            <p>② 개인정보의 파기를 원하지 않으시는 경우, 기간 만료 전 서비스 로그인을 하시면 됩니다.</p>\r\n                            <p>제7조(정보주체와 법정대리인의 권리·의무 및 그 행사방법에 관한 사항)</p>\r\n                            <p>① 정보주체는 〈소소한 프로젝트〉에 대해 언제든지 개인정보 열람·정정·삭제·처리정지 요구 등의 권리를 행사할 수 있습니다.</p>\r\n                            <p>② 제1항에 따른 권리 행사는 〈소소한 프로젝트〉에 대해 「개인정보 보호법」 시행령 제41조제1항에 따라 서면, 전자우편, 모사전송(FAX) 등을 통하여 하실 수 있으며, 〈소소한 프로젝트〉는 이에 대해 지체 없이 조치하겠습니다.</p>\r\n                            <p>③ 제1항에 따른 권리 행사는 정보주체의 법정대리인이나 위임을 받은 자 등 대리인을 통하여 하실 수 있습니다. 이 경우 “개인정보 처리 방법에 관한 고시(제2020-7호)” 별지 제11호 서식에 따른 위임장을 제출하셔야 합니다.</p>\r\n                            <p>④ 개인정보 열람 및 처리정지 요구는 「개인정보 보호법」 제35조 제4항, 제37조 제2항에 의하여 정보주체의 권리가 제한 될 수 있습니다.</p>\r\n                            <p>⑤ 개인정보의 정정 및 삭제 요구는 다른 법령에서 그 개인정보가 수집 대상으로 명시되어 있는 경우에는 그 삭제를 요구할 수 없습니다.</p>\r\n                            <p>⑥ 〈소소한 프로젝트〉는 정보주체 권리에 따른 열람의 요구, 정정·삭제의 요구, 처리정지의 요구 시 열람 등 요구를 한 자가 본인이거나 정당한 대리인인지를 확인합니다.</p>\r\n                            <p>제8조(개인정보의  안전성 확보조치에 관한 사항) 〈소소한 프로젝트〉는 개인정보의 안전성 확보를 위해 다음과 같은 조치를 취하고 있습니다.</p>\r\n                            <p>① 내부관리계획의 수립 및 시행</p>\r\n                            <p>개인정보의 안전한 처리를 위하여 내부관리계획을 수립하고 시행하고 있습니다.</p>\r\n                            <p>② 개인정보의 암호화</p>\r\n                            <p>이용자의 개인정보와 비밀번호는 암호화 되어 저장 및 관리되고 있어, 본인만이 알 수 있으며 중요한 데이터는 파일 및 전송 데이터를 암호화 하거나 파일 잠금 기능을 사용하는 등의 별도 보안기능을 사용하고 있습니다.</p>\r\n                            <p>제9조(개인정보를 자동으로 수집하는 장치의 설치·운영 및 그 거부에 관한 사항)</p>\r\n                            <p>① 〈소소한 프로젝트〉는 이용자에게 개별적인 맞춤서비스를 제공하기 위해 이용정보를 저장하고 수시로 불러오는 ‘쿠키(cookie)’를 사용합니다.</p>\r\n                            <p>② 쿠키는 웹사이트를 운영하는데 이용되는 서버(http)가 이용자의 컴퓨터 브라우저에게 보내는 소량의 정보이며 이용자들의 PC 컴퓨터내의 하드디스크에 저장되기도 합니다.</p>\r\n                            <article>\r\n                                <p>1. 쿠키의 사용 목적: 서비스 내 안내 페이지 활성화 여부를 파악하여 이용자에게 최적화된 정보 제공을 위해 사용됩니다.</p>\r\n                                <p>2. 쿠키의 설치•운영 및 거부: 웹브라우저 상단의 도구-인터넷 옵션-개인정보 메뉴의 옵션 설정을 통해 쿠키 저장을 거부 할 수 있습니다.</p>\r\n                                <p>3. 쿠키 저장을 거부할 경우 맞춤형 서비스 이용에 어려움이 발생할 수 있습니다.</p>\r\n                            </article>\r\n                            <p>제13조 (개인정보 보호책임자에 관한 사항)</p>\r\n                            <p>① 〈소소한 프로젝트〉는 개인정보 처리에 관한 업무를 총괄해서 책임지고, 개인정보 처리와 관련한 정보주체의  불만처리 및 피해구제 등을 위하여 아래와 같이 개인정보 보호책임자를 지정하고 있습니다.</p>\r\n                            <article>\r\n                                <p>▶ 개인정보 보호책임자</p>\r\n                                <p>성명: 소소한 프로젝트 운영자</p>\r\n                                <p>연락처: </p>\r\n                                <p>※ 개인정보 보호 담당부서로 연결됩니다.</p>\r\n                                <p>▶ 개인정보 보호 담당부서</p>\r\n                                <p>부서명: 없음</p>\r\n                                <p>담당자: 소소한 프로젝트 운영자</p>\r\n                                <p>연락처: Plater10Day@gmail.com / @Plater10Day(트위터) / @plater10day(인스타)</p>\r\n                            </article>\r\n                            <p>② 정보주체께서는 〈소소한 프로젝트〉의 서비스(또는 사업)를 이용하시면서 발생한 모든 개인정보 보호 관련 문의, 불만처리, 피해구제 등에 관한 사항을 개인정보 보호책임자 및 담당부서로 문의하실 수 있습니다. 〈소소한 프로젝트〉는 정보주체의 문의에 대해 지체 없이 답변 및 처리해드릴 것입니다.</p>\r\n                            <p>제14조(개인정보의  열람청구를 접수·처리하는 부서)</p>\r\n                            <p>정보주체는 ｢개인정보 보호법｣ 제35조에 따른 개인정보의 열람 청구를 아래의 부서에 할 수 있습니다.</p>\r\n                            <p>〈소소한 프로젝트〉는 정보주체의 개인정보 열람청구가 신속하게 처리되도록 노력하겠습니다.</p>\r\n                            <article>\r\n                                <p>▶ 개인정보 열람청구 접수·처리 부서</p>\r\n                                <p>부서명: 없음</p>\r\n                                <p>담당자: 소소한 프로젝트 운영자</p>\r\n                                <p>연락처: Plater10Day@gmail.com / @Plater10Day(트위터) / @plater10day(인스타)</p>\r\n                            </article>\r\n                            <p>제15조(정보주체의 권익침해에 대한 구제방법)</p>\r\n                            <p>정보주체는 개인정보침해로 인한 구제를 받기 위하여 개인정보분쟁조정위원회, 한국인터넷진흥원 개인정보침해신고센터 등에 분쟁해결이나 상담 등을 신청할 수 있습니다. 이 밖에 기타 개인정보침해의 신고, 상담에 대하여는 아래의 기관에 문의하시기 바랍니다.</p>\r\n                            <p>① 개인정보분쟁조정위원회: (국번없이) 1833-6972 (www.kopico.go.kr)</p>\r\n                            <p>② 개인정보침해신고센터: (국번없이) 118 (privacy.kisa.or.kr)</p>\r\n                            <p>③ 대검찰청: (국번없이) 1301 (www.spo.go.kr)</p>\r\n                            <p>④. 경찰청: (국번없이) 182 (ecrm.cyber.go.kr)</p>\r\n                            <p>「개인정보보호법」제35조(개인정보의 열람), 제36조(개인정보의 정정·삭제), 제37조(개인정보의 처리정지 등)의  규정에 의한 요구에 대 하여 공공기관의 장이 행한 처분 또는 부작위로 인하여 권리 또는 이익의 침해를 받은 자는 행정심판법이 정하는 바에 따라 행정심판을 청구할 수 있습니다.</p>\r\n                            <p>※ 행정심판에 대해 자세한 사항은 중앙행정심판위원회(www.simpan.go.kr) 홈페이지를 참고하시기 바랍니다.</p>\r\n                            <p>제16조(개인정보 처리방침 변경)</p>\r\n                            <p>① 이 개인정보처리방침은 2023년 4월 1부터 적용됩니다.</p>\r\n                            <p>② 이전의 개인정보 처리방침은 〈소소한 프로젝트〉 공식 사이트에서 확인하실 수 있습니다.</p>\r\n                            <br></br>\r\n                        </article>\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Conditions></Conditions>\r\n            <Individual></Individual>\r\n            <SecondInfo></SecondInfo>\r\n            <div className='login_wrap'>\r\n                <div className='login_outContainer'>\r\n                    <section className='section_shootingStar'>\r\n                        <span className='shootingStar'></span>\r\n                        <span className='shootingStar'></span>\r\n                        <span className='shootingStar'></span>\r\n                        <span className='shootingStar'></span>\r\n                    </section>\r\n                    <div className='login_innerContainer'>\r\n                        <p className='login_title'>광활한 인터넷 우주 속</p>\r\n                        <p className='login_title'>편지를 보내고 싶다면,</p>\r\n                        <img alt='login_img' className='login_img' src='https://github.com/Lee-Seung-Wook/Angelo-s_Library/blob/main/lib/logo/logo.png?raw=true'></img>\r\n                        <br></br>\r\n                        <img alt='login_img_title' className='login_img_title' src='https://github.com/Lee-Seung-Wook/Angelo-s_Library/blob/main/lib/logo/logo_title.png?raw=true'></img>\r\n                        <br></br>\r\n                        <img alt='login_kakao' className='login_kakao' src='https://github.com/Lee-Seung-Wook/Angelo-s_Library/blob/main/lib/etc/login/kakao_login_medium_narrow.gif?raw=true' onClick={() => { loginWithKakao(process.env.REACT_APP_REST_API_KEY, process.env.REACT_APP_REDIRECT) }}></img>\r\n                        <div className='login_text'>\r\n                            <span onClick={toggleConditions}>이용약관</span><span>│</span><span onClick={toggleIndividual}>개인정보처리방침</span><span>│</span><a className='go_to_notion_white' href='https://elfin-shelf-a6a.notion.site/PL-TER-83d6a7213845476f84c780d863591e90' target={'_blank'} rel=\"noopener noreferrer\"><span>ContactUs</span></a>\r\n                        </div>\r\n                        <p className='login_name'>©소소한프로젝트</p>\r\n                    </div>\r\n                    <div className='login_img_bottom'></div>\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Login;","C:\\Users\\blue_\\OneDrive\\바탕 화면\\GitHub\\soso-web\\main\\src\\components\\Redirect.js",["89"],[],"import React, { useEffect } from 'react';\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useDispatch } from 'react-redux';\r\nimport './Redirect.css';\r\n\r\nfunction Redirect() {\r\n    const navigater = useNavigate();\r\n    const dispatch = useDispatch();\r\n    const urlParams = new URL(window.location.href).searchParams;\r\n    const name = urlParams.get('code');\r\n    const urlParamsErro = new URL(window.location.href).searchParams;\r\n    const nameErro = urlParamsErro.get('error_description');\r\n\r\n    // 공유 가능 사용자 아이디 발급 기능\r\n    function RequestShareUserID(userID) {\r\n        fetch(`${process.env.REACT_APP_SHARE_USERID}${userID}`, {\r\n            method: 'GET',\r\n            mode: 'cors',\r\n            cache: 'no-cache',\r\n            credentials: 'same-origin',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n            .then(res => {\r\n                if (!res.ok) {\r\n                    throw new Error();\r\n                };\r\n                return res.json();\r\n            })\r\n            .then((data) => {\r\n                dispatch({ type: 'CHANGE_SHAREUSERID', data: String(data) });\r\n            })\r\n            .catch((error) => {\r\n                alert('공유 가능한 사용자 주소를 정상적으로 받아오지 못했습니다. 공유 버튼을 다시 눌러주세요.');\r\n            });\r\n    };\r\n\r\n    // 사용자 동의 항목 요청 기능\r\n    function RequestUserMSG(userId) {\r\n        fetch(`${process.env.REACT_APP_USER_MSG}${userId}`, {\r\n            method: 'GET',\r\n            mode: 'cors',\r\n            cache: 'no-cache',\r\n            credentials: 'same-origin',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n            .then(res => {\r\n                if (!res.ok) {\r\n                    throw new Error();\r\n                };\r\n                return res.json();\r\n            })\r\n            .then((data) => {\r\n                dispatch({ type: 'CHANGE_AGREEMENT', data: data });\r\n                RequestShareUserID(userId);\r\n            })\r\n            .catch((error) => {\r\n                alert('정상적으로 사용자 동의 항목 정보를 응답 받지 못했습니다. 다시 로그인 해주세요.');\r\n                dispatch({ type: 'CHANGE_USERID', data: null });\r\n                navigater('/web/login');\r\n            });\r\n    };\r\n\r\n    // 받은 편지 배열 요청 기능\r\n    function RequestLetterArray(userId) {\r\n        fetch(`${process.env.REACT_APP_LETTER_ARRAY}${userId}`, {\r\n            method: 'GET',\r\n            mode: 'cors',\r\n            cache: 'no-cache',\r\n            credentials: 'same-origin',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n            .then(res => {\r\n                if (!res.ok) {\r\n                    throw new Error();\r\n                };\r\n                return res.json();\r\n            })\r\n            .then((data) => {\r\n                if (data.length > 37) {\r\n                    for (let i = 0; data.length - 36; i++) {\r\n                        data.pop();\r\n                    };\r\n                    dispatch({ type: 'CHANGE_LETTERDATA', data: data });\r\n                } else {\r\n                    dispatch({ type: 'CHANGE_LETTERDATA', data: data });\r\n                };\r\n                RequestUserMSG(userId);\r\n            })\r\n            .catch((error) => {\r\n                alert('정상적으로 사용자 편지 데이터를 응답 받지 못했습니다. 다시 로그인 해주세요.');\r\n                dispatch({ type: 'CHANGE_USERID', data: null });\r\n                navigater('/web/login');\r\n            });\r\n    };\r\n\r\n    // 사용자 정보 요청 기능\r\n    function RequestUserData(userId) {\r\n        fetch(`${process.env.REACT_APP_USER_DATA}${userId}`, {\r\n            method: 'GET',\r\n            mode: 'cors',\r\n            cache: 'no-cache',\r\n            credentials: 'same-origin',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n            .then(res => {\r\n                if (!res.ok) {\r\n                    throw new Error();\r\n                };\r\n                return res.json();\r\n            })\r\n            .then((data) => {\r\n                dispatch({ type: 'CHANGE_USERNICKNAME', data: String(data.userNickName) });\r\n                dispatch({ type: 'CHANGE_OPENDATE', data: Number(data.userOpenDate) });                \r\n                RequestLetterArray(userId);\r\n            })\r\n            .catch((error) => {\r\n                alert('정상적으로 사용자 데이터를 응답 받지 못했습니다. 다시 로그인 해주세요.');\r\n                dispatch({ type: 'CHANGE_USERID', data: null });\r\n                navigater('/web/login');\r\n            });\r\n    };\r\n\r\n    // (랜더링 직후) 사용자 로그인 기능\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            if (nameErro === 'User denied access') {\r\n                alert('로그인에 실패하였습니다.');\r\n                dispatch({ type: 'CHANGE_USERID', data: null });\r\n                navigater('/web/login');\r\n            };\r\n            const code = { code: name };\r\n            const queryStringBody = Object.keys(code)\r\n                .map(k => encodeURIComponent(k) + \"=\" + encodeURI(code[k]))\r\n                .join(\"&\");\r\n            fetch(`${process.env.REACT_APP_KAKAO_LOGIN}`, {\r\n                method: 'POST',\r\n                mode: 'cors',\r\n                cache: 'no-cache',\r\n                credentials: 'same-origin',\r\n                headers: {\r\n                    'content-type': 'application/x-www-form-urlencoded;charset=utf-8'\r\n                },\r\n                body: queryStringBody\r\n            })\r\n                .then(res => {\r\n                    if (!res.ok) {\r\n                        throw new Error();\r\n                    };\r\n                    return res.json();\r\n                })\r\n                .then((data) => {\r\n                    fetch(`${process.env.REACT_APP_USERID}`, {\r\n                        method: 'POST',\r\n                        mode: 'cors',\r\n                        cache: 'no-cache',\r\n                        credentials: 'same-origin',\r\n                        headers: {\r\n                            'Content-Type': 'application/json'\r\n                        },\r\n                        body: JSON.stringify(data)\r\n                    })\r\n                        .then(res => {\r\n                            if (!res.ok) {\r\n                                throw new Error();\r\n                            };\r\n                            return res.json();\r\n                        })\r\n                        .then((data) => {\r\n                            dispatch({ type: 'CHANGE_USERID', data: data });\r\n                            RequestUserData(data);\r\n                            navigater('/web/main');\r\n                        })\r\n                        .catch((error) => {\r\n                            alert('서버가 불안정 하여 사용자 아이디를 받아오지 못했습니다.');\r\n                            dispatch({ type: 'CHANGE_USERID', data: null });\r\n                            navigater('/web/login');\r\n                        });\r\n                })\r\n                .catch((error) => {\r\n                    alert('서버가 불안정 하여 로그인에 실패했습니다.');\r\n                    dispatch({ type: 'CHANGE_USERID', data: null });\r\n                    navigater('/web/login');\r\n                });\r\n        }, 500);\r\n    }, []);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className='redirect_outContainer'>\r\n                <section className='section_shootingStar'>\r\n                    <span className='shootingStar'></span>\r\n                    <span className='shootingStar'></span>\r\n                    <span className='shootingStar'></span>\r\n                    <span className='shootingStar'></span>\r\n                </section>\r\n                <div className='redirect_gif'></div>\r\n                <h3 className='redirect_h3'>로그인 중입니다...</h3>\r\n                <h4 className='redirect_h4'>[리빙포인트] 달에는 토끼가 떡을 만들고 있다.</h4>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Redirect;","C:\\Users\\blue_\\OneDrive\\바탕 화면\\GitHub\\soso-web\\main\\src\\components\\Redirect2.js",[],[],"C:\\Users\\blue_\\OneDrive\\바탕 화면\\GitHub\\soso-web\\main\\src\\components\\Send.js",["90","91","92","93"],[],"C:\\Users\\blue_\\OneDrive\\바탕 화면\\GitHub\\soso-web\\main\\src\\components\\ModalStory.js",[],[],"C:\\Users\\blue_\\OneDrive\\바탕 화면\\GitHub\\soso-web\\main\\src\\components\\InnerPage.js",["94","95","96"],[],"import React, { useCallback, useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport Slider from \"react-slick\";\r\nimport { Adsense } from '@ctrl/react-adsense';\r\nimport './InnerPage.css';\r\nimport ShareBt from './ShareBt';\r\nimport Restart from './Restart';\r\nimport Refresh from './Refresh';\r\n\r\nfunction InnerPage() {\r\n    const dispatch = useDispatch();\r\n    // For component Letter box\r\n    const [render, setRender] = useState(-1);\r\n    const [slickPage, setSlickPage] = useState(0);\r\n    // 편지지 기본 설정 값\r\n    const [setStyle, setSetStyle] = useState({ 'fontSize': '', 'fontFamily': '', 'color': '', 'textAlign': '', 'backgroundImage': '' });\r\n    const userID = useSelector((state) => state.userID);\r\n    const ShareUserID = useSelector((state) => state.ShareUserID);\r\n    const userData = useSelector((state) => state.userData);\r\n    const letterData = useSelector((state) => state.letterData);\r\n    const isNamePage = useSelector((state) => state.isNamePage);\r\n    const ModalCreateUrl = useSelector((state) => state.ModalCreateUrl);\r\n    const isPopUpCopyLink = useSelector((state) => state.isPopUpCopyLink);\r\n    const isYesName = useSelector((state) => state.isYesName);\r\n    const isRestart = useSelector((state) => state.isRestart);\r\n    const isImagePreload = useSelector((state) => state.isImagePreload);\r\n    const [startBtn, setStartBtn] = useState(true);\r\n\r\n    // 사용자 개설일 확인 기능\r\n    useEffect(() => {\r\n        if (userData.openDate === 875286000000 || userData.openDate === 0) {\r\n            dispatch({ type: 'CHANGE_ISNAMEPAGE', data: false });\r\n        } else if (userData.openDate !== 875286000000 && userData.openDate !== 0) {\r\n            dispatch({ type: 'CHANGE_ISNAMEPAGE', data: true });\r\n        };\r\n    }, [dispatch, userData.openDate]);\r\n\r\n    // 신규 사용자 용 Component\r\n    function SetSignal() {\r\n        const isSendSignal = useSelector((state) => state.isSendSignal);\r\n        const [isPopUpOpenPlanet, setIsPopUpOpenPlanet] = useState(false);\r\n        const [isPopUpOpenPlanetName, setIsPopUpOpenPlanetName] = useState(false);\r\n        const [stringUserNickname, setStringUserNickname] = useState(String(userData.nickname));\r\n        const [lengthUserNickname, setLengthUserNickname] = useState(Number(userData.nickname.length));\r\n        const [startMonth, setStartMonth] = useState(null);\r\n        const [startHours, setStartHours] = useState(null);\r\n        const [endMonth, setEndMonth] = useState(null);\r\n        const [endHours, setEndHours] = useState(null);\r\n\r\n        // (팝업) 행성 개설 시 이름 기재 여부 확인\r\n        function PopUpOpenPlanetNoName() {\r\n            return (\r\n                <React.Fragment>\r\n                    <div className={isPopUpOpenPlanetName ? \"ispopupopenplanetnoname\" : \"ispopupopenplanetnoname_fade\"}>\r\n                        <div className='ispopupopenplanetnoname_outContainer'>\r\n                            <p className='ispopupopenplanetnoname_title'>행성 이름이 비어있습니다.</p>\r\n                            <p className='ispopupopenplanetnoname_p'>이름이 없는 행성은 조금 울적할지도 몰라요.</p>\r\n                            <div className='ispopupopenplanetnoname_innerBox'>\r\n                                <div className='ispopupopenplanetnoname_button_cancel' onClick={() => {\r\n                                    setIsPopUpOpenPlanetName(!isPopUpOpenPlanetName);\r\n                                }}>돌아가기</div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </React.Fragment>\r\n            );\r\n        };\r\n\r\n        // (팝업) 행성 개설 안내\r\n        function PopUpOpenPlanet() {\r\n            // 공유 가능 사용자 아이디 발급 기능\r\n            async function RequestShareUserID(userID) {\r\n                setStartBtn(false);\r\n                await fetch(`${process.env.REACT_APP_SHARE_USERID}${userID}`, {\r\n                    method: 'GET',\r\n                    mode: 'cors',\r\n                    cache: 'no-cache',\r\n                    credentials: 'same-origin',\r\n                    headers: {\r\n                        'Content-Type': 'application/json'\r\n                    }\r\n                })\r\n                    .then(res => res.json())\r\n                    .then((userData) => {\r\n                        dispatch({ type: 'CHANGE_SHAREUSERID', data: String(userData) });\r\n                    })\r\n                    .catch((error) => {\r\n                        // error 무시하고 진행, 실제 공유 가능 링크 생성 시 별도 기능 재실행 예정\r\n                    });\r\n                await sendSignal_confirm();\r\n            };\r\n\r\n            return (\r\n                <React.Fragment>\r\n                    <div className={isPopUpOpenPlanet ? \"ispopupopenplanet\" : \"ispopupopenplanet_fade\"}>\r\n                        <div className='ispopupopenplanet_outContainer'>\r\n                            <p className='ispopupopenplanet_title'>{stringUserNickname}(이)란 행성을</p>\r\n                            <p className='ispopupopenplanet_title'>개설할까요?</p>\r\n                            <p className='ispopupopenplanet_p'>행성의 이름과</p>\r\n                            <p className='ispopupopenplanet_p'>시간을 확인해주세요.</p>\r\n                            <div className='ispopupopenplanet_innerBox'>\r\n                                <div className='ispopupopenplanet_button_signOut' onClick={() => { setIsPopUpOpenPlanet(!isPopUpOpenPlanet); }}>취소</div>\r\n                                <div className='ispopupopenplanet_button_cancel' onClick={() => {\r\n                                    setIsPopUpOpenPlanet(!isPopUpOpenPlanet);\r\n                                    RequestShareUserID(userID);\r\n                                }}>개설하기</div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </React.Fragment>\r\n            );\r\n        };\r\n\r\n        // '일' 시작 생성 기능\r\n        function settingStartMonth() {\r\n            setInterval(function () {\r\n                let now = new Date();\r\n                let months = now.getMonth() + 1;\r\n                let days = now.getDate();\r\n                setStartMonth(months + '-' + days);\r\n            }, 300);\r\n        };\r\n\r\n        // '시간' 시작 생성 기능\r\n        function settingStartHours() {\r\n            setInterval(function () {\r\n                let now = new Date();\r\n                let hours = now.getHours();\r\n                let minutes = now.getMinutes();\r\n                let seconds = now.getSeconds();\r\n                setStartHours(hours + ':' + minutes + ':' + seconds);\r\n            }, 300);\r\n        };\r\n\r\n        // '일' 마감 생성 기능\r\n        function settingEndtMonth() {\r\n            setInterval(function () {\r\n                let now = new Date();\r\n                now.setDate(now.getDate() + 10)\r\n                let months = now.getMonth() + 1;\r\n                let days = now.getDate();\r\n                setEndMonth(months + '-' + days);\r\n            }, 300);\r\n        };\r\n\r\n        // '시간' 마감 생성 기능\r\n        function settingEndHours() {\r\n            setInterval(function () {\r\n                let now = new Date();\r\n                let hours = now.getHours();\r\n                let minutes = now.getMinutes();\r\n                let seconds = now.getSeconds();\r\n                setEndHours(hours + ':' + minutes + ':' + seconds);\r\n            }, 300);\r\n        };\r\n\r\n        // 일자 생성 기능 통합\r\n        function showCreateSendSingalPage() {\r\n            dispatch({ type: 'CHANGE_ISSENDSIGNAL', data: !isSendSignal });\r\n            settingStartMonth();\r\n            settingStartHours();\r\n            settingEndtMonth();\r\n            settingEndHours();\r\n        };\r\n\r\n        // (팝업) 행성 개설 안내 비활성화 기능\r\n        function fadeCreateSendSingalPage() {\r\n            const originalUserNickname = String(userData.nickname);\r\n            const originalUserNicknameLength = Number(userData.nickname.length);\r\n            setStringUserNickname(originalUserNickname);\r\n            setLengthUserNickname(originalUserNicknameLength);\r\n            dispatch({ type: 'CHANGE_ISSENDSIGNAL', data: !isSendSignal });\r\n        };\r\n\r\n        // 사용자 행성 생성 정보 전달 기능\r\n        async function sendSignal_confirm() {\r\n            // 사용자 개설일 정보 전달 기능\r\n            await fetch(`${process.env.REACT_APP_REGISTER_OPENDATE}`, {\r\n                method: 'POST',\r\n                mode: 'cors',\r\n                cache: 'no-cache',\r\n                credentials: 'same-origin',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(userID)\r\n            })\r\n                .then((res) => {\r\n                    if (!res.ok) {\r\n                        throw new Error();\r\n                    };\r\n                    const now = new Date();\r\n                    now.setDate(now.getDate() + 10);\r\n                    const finalDate = Number(now.getTime());\r\n                    dispatch({ type: 'CHANGE_OPENDATE', data: finalDate });\r\n                    // 사용자 별명 정보 전달 기능\r\n                    fetch(`${process.env.REACT_APP_REGISTER_NICKNAME}${userID}/`, {\r\n                        method: 'PATCH',\r\n                        mode: 'cors',\r\n                        cache: 'no-cache',\r\n                        credentials: 'same-origin',\r\n                        headers: {\r\n                            'Content-Type': 'application/json'\r\n                        },\r\n                        body: JSON.stringify(String(stringUserNickname))\r\n                    })\r\n                        .then((res) => {\r\n                            if (!res.ok) {\r\n                                throw new Error();\r\n                            };\r\n                            dispatch({ type: 'CHANGE_USERNICKNAME', data: stringUserNickname });\r\n                            dispatch({ type: 'CHANGE_ISSENDSIGNAL', data: !isSendSignal });\r\n                            dispatch({ type: 'CHANGE_MODALCREATEURL', data: !ModalCreateUrl });\r\n                            dispatch({ type: 'CHANGE_ISYESNAME', data: true });\r\n                        })\r\n                        .catch((error) => {\r\n                            setStartBtn(true);\r\n                            alert('서버가 불안정 하여 행성 개설(행성 이름)에 실패했습니다. 다시 시도해주세요.');\r\n                            fadeCreateSendSingalPage();\r\n                        })\r\n                })\r\n                .catch((error) => {\r\n                    setStartBtn(true);\r\n                    alert('서버가 불안정 하여 행성 개설(개설 일자)에 실패했습니다. 다시 시도해주세요.');\r\n                    fadeCreateSendSingalPage();\r\n                });\r\n        };\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <PopUpOpenPlanet></PopUpOpenPlanet>\r\n                <PopUpOpenPlanetNoName></PopUpOpenPlanetNoName>\r\n                <div className='noname_outContainer'>\r\n                    <p>아직 신호를 보내지</p>\r\n                    <p>않았습니다.</p>\r\n                    <div className='noname_sendSignal' onClick={showCreateSendSingalPage}>신호 보내기</div>\r\n                    <div className={isSendSignal ? \"noname_sendSignal_outContainer\" : \"noname_sendSignal_outContainer_fade\"}>\r\n                        <div className='noname_sendSignal_innerTitle'>\r\n                            <img alt='back_icon' className='noname_sendSignal_innerTitle_backIcon' src='https://github.com/Lee-Seung-Wook/Angelo-s_Library/blob/main/lib/icon/back.png?raw=true' onClick={fadeCreateSendSingalPage}></img>\r\n                            <p className='noname_sendSignal_innerTitle_p'>안녕하세요.\r\n                                <br></br>\r\n                                제 이름은...\r\n                            </p>\r\n                        </div>\r\n                        <div className='noname_sendSignal_innerName'>\r\n                            <p className='noname_sendSignal_innerName_p'>행성의 이름</p>\r\n                            <input id='input_userName' maxLength={10} onChange={(e) => {\r\n                                setLengthUserNickname(e.target.value.length);\r\n                                setStringUserNickname(e.target.value);\r\n                            }} value={stringUserNickname}></input><span className='inputUserNameLength'>{lengthUserNickname}/10</span>\r\n                        </div>\r\n                        <div className='noname_sendSignal_innerTime'>\r\n                            <p className='noname_sendSignal_innerTime_p'>시작 & 마감</p>\r\n                            <h6 className='noname_sendSignal_innerTime_h6'>10일 동안 편지를 받을 수 있습니다.</h6>\r\n                        </div>\r\n                        <div className='noname_sendSignal_innerTime_view'>\r\n                            <div className='noname_sendSignal_innerTime_view_start'>\r\n                                <div className='noname_sendSignal_innerTime_view_bolt_div'>\r\n                                    <div className='noname_sendSignal_innerTime_view_bolt_1'></div>\r\n                                    <div className='noname_sendSignal_innerTime_view_bolt_2'></div>\r\n                                </div>\r\n                                <p className='noname_sendSignal_innerTime_view_p'>Start</p>\r\n                                <p className='noname_sendSignal_innerTime_view_month'>{startMonth}</p>\r\n                                <p className='noname_sendSignal_innerTime_view_hours'>{startHours}</p>\r\n                            </div>\r\n                            <div className='noname_sendSignal_innerTime_view_pause'></div>\r\n                            <div className='noname_sendSignal_innerTime_view_end'>\r\n                                <div className='noname_sendSignal_innerTime_view_bolt_div'>\r\n                                    <div className='noname_sendSignal_innerTime_view_bolt_1'></div>\r\n                                    <div className='noname_sendSignal_innerTime_view_bolt_2'></div>\r\n                                </div>\r\n                                <p className='noname_sendSignal_innerTime_view_p'>End</p>\r\n                                <p className='noname_sendSignal_innerTime_view_month'>{endMonth}</p>\r\n                                <p className='noname_sendSignal_innerTime_view_hours'>{endHours}</p>\r\n                            </div>\r\n                        </div>\r\n                        <div className='noname_sendSignal_innerNotice'>\r\n                        </div>\r\n                        <div className='noname_sendSignal_startDiv'>\r\n                            <div className={startBtn ? 'noname_sendSignal_startDiv_button' : 'noname_sendSignal_startDiv_button_fade'} onClick={\r\n                                () => {\r\n                                    if (lengthUserNickname === 0) {\r\n                                        setIsPopUpOpenPlanetName(!isPopUpOpenPlanetName);\r\n                                    } else {\r\n                                        setIsPopUpOpenPlanet(!isPopUpOpenPlanet);\r\n                                    };\r\n                                }}>시작하기</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    };\r\n\r\n    // (팝업) 행성 개설 완료 안내\r\n    function CreateNameURL() {\r\n        // 공유 가능한 사용자 아이디 요청 기능\r\n        function RequestShareUserIDforUrlCopy() {\r\n            fetch(`${process.env.REACT_APP_SHARE_USERID}${userID}`, {\r\n                method: 'GET',\r\n                mode: 'cors',\r\n                cache: 'no-cache',\r\n                credentials: 'same-origin',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            })\r\n                .then(res => {\r\n                    if (!res.ok) {\r\n                        throw new Error();\r\n                    };\r\n                    return res.json();\r\n                })\r\n                .then((userData) => {\r\n                    dispatch({ type: 'CHANGE_SHAREUSERID', data: String(userData) });\r\n                })\r\n                .catch((error) => {\r\n                    alert('정상적으로 공유 가능한 사용자 링크를 받아오지 못했습니다. 공유하기 버튼을 이용해주세요.');\r\n                    dispatch({ type: 'CHANGE_MODALCREATEURL', data: !ModalCreateUrl });\r\n                });\r\n        };\r\n        // 사용자 공유 URL 제작 기능\r\n        function urlCopy() {\r\n            RequestShareUserIDforUrlCopy();\r\n            setTimeout(() => {\r\n                let Dummy_Tag = document.createElement(\"input\");\r\n                let Current_URL = `${process.env.REACT_APP_BASIC_URL2}userID=${ShareUserID}`;\r\n                document.body.appendChild(Dummy_Tag);\r\n                Dummy_Tag.value = Current_URL;\r\n                Dummy_Tag.select();\r\n                document.execCommand(\"copy\");\r\n                document.body.removeChild(Dummy_Tag);\r\n                dispatch({ type: 'CHANGE_MODALCREATEURL', data: !ModalCreateUrl });\r\n                dispatch({ type: 'CHANGE_ISPOPUPCOPYLINK', data: !isPopUpCopyLink });\r\n            }, 100);\r\n        };\r\n        // (팝업) 링크 복사\r\n        function PopUpCopyLink() {\r\n            return (\r\n                <React.Fragment>\r\n                    <div className={isPopUpCopyLink ? \"isPopupCopyLink\" : \"isPopupCopyLink_fade\"}>\r\n                        <div className='isPopupCopyLink_outContainer'>\r\n                            <p className='isPopupCopyLink_title'>신호 복사 완료!</p>\r\n                            <p className='isPopupCopyLink_p'>링크가 복사 되었어요.</p>\r\n                            <div className='isPopupCopyLink_button_signOut' onClick={() => { dispatch({ type: 'CHANGE_ISPOPUPCOPYLINK', data: !isPopUpCopyLink }); }}>확인</div>\r\n                        </div>\r\n                    </div>\r\n                </React.Fragment>\r\n            );\r\n        };\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <PopUpCopyLink></PopUpCopyLink>\r\n                <div className={ModalCreateUrl ? \"yesNameUrl\" : \"yesNameUrl_fade\"}>\r\n                    <div className='yesNameUrl_outContainer'>\r\n                        <p className='yesNameUrl_title'>행성 개설 완료!</p>\r\n                        <p className='yesNameUrl_p'>행성 개설이 완료되었습니다.</p>\r\n                        <p className='yesNameUrl_p'>신호를 공유해 편지를 받아보세요.</p>\r\n                        <div className='yesNameUrl_innerBox'>\r\n                            <div className='yesNameUrl_button_signOut' onClick={() => { dispatch({ type: 'CHANGE_MODALCREATEURL', data: !ModalCreateUrl }); }}>확인</div>\r\n                            <div className='yesNameUrl_button_cancel' onClick={urlCopy}>신호 복사하기</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    };\r\n\r\n    // 기존 사용자 용 Component\r\n    function ShowMemberInf() {\r\n        // 사용자 남은 시간 표현 기능\r\n        const [Dday, setDday] = useState(Number(userData.openDate));\r\n        const setDDay = useCallback(() => {\r\n            let count = setInterval(function () {\r\n                let now = new Date().getTime();\r\n                let distance = Dday - now;\r\n                let days = Math.floor(distance / (1000 * 60 * 60 * 24));\r\n                let hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\r\n                let minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\r\n                let seconds = Math.floor((distance % (1000 * 60)) / 1000);\r\n                setDday(days + ' 일 ' + hours + ' : ' + minutes + ' : ' + seconds);\r\n                if (distance < 0) {\r\n                    clearInterval(count);\r\n                    dispatch({ type: 'CHANGE_ISSHAREBT', data: false });\r\n                    dispatch({ type: 'CHANGE_ISSHARE', data: false });\r\n                    dispatch({ type: 'CHANGE_ISRESTART', data: true });\r\n                    dispatch({ type: 'CHANGE_ISYESNAME', data: false });\r\n                    setDday(\"만료된 행성\");\r\n                };\r\n            }, 0);\r\n        }, [Dday]);\r\n\r\n        // (랜더링 직후)\r\n        useEffect(() => {\r\n            setDDay();\r\n        }, []);\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <div className='yesname_outContainer'>\r\n                    <h3><span>{userData.nickname}</span></h3>\r\n                    <div className={isYesName ? '' : 'yesname_outContainer_div_fade'}>\r\n                        <Refresh></Refresh>\r\n                        <h4>남은 시간</h4>\r\n                    </div>\r\n                    <h4 className={isYesName ? '' : 'h4_new'} >{Dday}</h4>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    };\r\n\r\n    // 편지 박스 Component\r\n    function LetterBox() {\r\n        const isNotYetLetter = useSelector((state) => state.isNotYetLetter);\r\n        const isLetterBlockConfirm = useSelector((state) => state.isLetterBlockConfirm);\r\n        const isLetter = useSelector((state) => state.isLetter);\r\n        const [list, setList] = useState([<span key={1} style={{ color: \"white\" }}>Loading...</span>]);\r\n        const [list2, setList2] = useState([<span key={2} style={{ color: \"white\" }}>Loading...</span>]);\r\n        const [list3, setList3] = useState([<span key={3} style={{ color: \"white\" }}>Loading...</span>]);\r\n        const [list4, setList4] = useState([<span key={4} style={{ color: \"white\" }}>Loading...</span>]);\r\n\r\n        // 편지 박스 위치 설정 기능\r\n        function setSlickPageNum(i) {\r\n            if (i <= 8) {\r\n                setSlickPage(0);\r\n            } else if (i >= 9 && i <= 17) {\r\n                setSlickPage(1);\r\n            } else if (i >= 18 && i <= 26) {\r\n                setSlickPage(2);\r\n            } else if (i >= 27 && i <= 35) {\r\n                setSlickPage(3);\r\n            };\r\n        };\r\n\r\n        // (팝업) 편지 차단\r\n        function LetterBlockConfirm() {\r\n            return (\r\n                <React.Fragment>\r\n                    <div className={isLetterBlockConfirm ? \"isLetterBlockConfirm\" : \"isLetterBlockConfirm_fade\"}>\r\n                        <div className='isLetterBlockConfirm_outContainer'>\r\n                            <p className='isLetterBlockConfirm_title'>이 편지를</p>\r\n                            <p className='isLetterBlockConfirm_title'>차단하겠습니까?</p>\r\n                            <p className='isLetterBlockConfirm_p'>차단된 편지는 다시 읽을 수 없고</p>\r\n                            <p className='isLetterBlockConfirm_p'>서비스질 개선에 사용됩니다.</p>\r\n                            <div className='isLetterBlockConfirm_innerBox'>\r\n                                <div className='isLetterBlockConfirm_button_signOut' onClick={() => {\r\n                                    dispatch({ type: 'CHANGE_ISLETTER', data: false });\r\n                                    dispatch({ type: 'CHANGE_ISLETTERBLOCKCONFIRM', data: false });\r\n                                }}>취소</div>\r\n                                <div className='isLetterBlockConfirm_button_cancel' onClick={() => {\r\n                                    letterBlcok(render);\r\n                                    dispatch({ type: 'CHANGE_ISLETTERBLOCKCONFIRM', data: false });\r\n                                }}>차단하기</div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </React.Fragment>\r\n            );\r\n        };\r\n\r\n        // 편지 차단 기능(1)\r\n        function letterBlcok(i) {\r\n            const copyLetter = [...letterData];\r\n            copyLetter[i].letterIcon = 'block';\r\n            dispatch({ type: 'CHANGE_LETTERDATA', data: copyLetter });\r\n            dispatch({ type: 'CHANGE_ISLETTER', data: false });\r\n            setRender(-1);\r\n            shareLetterBlock(i);\r\n        };\r\n\r\n        // 편지 차단 기능(2)\r\n        function shareLetterBlock(i) {\r\n            fetch(`${process.env.REACT_APP_REGISTER_BLOCK}${String(letterData[i].letterId)}`, {\r\n                method: 'GET',\r\n                mode: 'cors',\r\n                cache: 'no-cache',\r\n                credentials: 'same-origin',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            })\r\n                .then(res => {\r\n                    if (!res.ok) {\r\n                        throw new Error();\r\n                    };\r\n                    return res.json();\r\n                })\r\n                .then((data) => {\r\n                })\r\n                .catch((error) => {\r\n                    alert('편지 차단이 정상적으로 진행되지 않았습니다. 다시 시도해주세요.');\r\n                });\r\n        };\r\n\r\n        // 편지지 기본 설정 초기화 기능\r\n        function resetLetterStyle() {\r\n            let newStyle = { ...setStyle };\r\n            newStyle['fontFamily'] = '';\r\n            newStyle['textAlign'] = '';\r\n            newStyle['fontSize'] = '';\r\n            newStyle['color'] = '';\r\n            newStyle['backgroundImage'] = '';\r\n            setSetStyle(newStyle);\r\n        };\r\n\r\n        // 편지지 설정 변경 기능\r\n        async function changeLetterStyle(i, newLetterData) {\r\n            let newStyle = { ...setStyle };\r\n            newStyle['fontFamily'] = newLetterData[i].letterFont;\r\n            newStyle['textAlign'] = newLetterData[i].letterTextAlign;\r\n            newStyle['fontSize'] = newLetterData[i].letterFontSize;\r\n            newStyle['color'] = newLetterData[i].letterFontColor;\r\n            newStyle['backgroundImage'] = newLetterData[i].letterPaper;\r\n            setSetStyle(newStyle);\r\n        };\r\n\r\n        // 편지 내용 삽입 및 타이핑 효과 기능\r\n        function enterDesc(i, checkTyping, newLetterData) {\r\n            if (checkTyping === false) {\r\n                let copyText = [newLetterData[i].letterContent];\r\n                let enterText = document.querySelector('.textbox');\r\n                let typingBool = false;\r\n                let typingIdx = 0;\r\n                let liIndex = 0;\r\n                setTimeout(() => {\r\n                    let arrayData = copyText[Object.keys(copyText)[liIndex]];\r\n                    let arraySplitData = arrayData.split('');\r\n                    let liLength = copyText.length;\r\n                    if (typingBool === false) {\r\n                        typingBool = true;\r\n                        var tyInt = setInterval(typing, 150);\r\n                    } function typing() {\r\n                        if (typingIdx < arrayData.length + 1) {\r\n                            enterText.value = arrayData.slice(undefined, typingIdx);\r\n                            typingIdx++;\r\n                        } else {\r\n                            if (liIndex < liLength - 1) {\r\n                                liIndex++;\r\n                                typingIdx = 0;\r\n                                typingBool = false;\r\n                                arrayData = copyText[Object.keys(copyText)[liIndex]]\r\n                                arraySplitData = arrayData.split('');\r\n                                clearInterval(tyInt);\r\n                                setTimeout(function () {\r\n                                    tyInt = setInterval(typing, 150);\r\n                                }, 250);\r\n                            } else if (liIndex === liLength - 1) {\r\n                                clearInterval(tyInt);\r\n                                copyText.splice(0, 1);\r\n                                typingBool = false;\r\n                                typingIdx = 0;\r\n                                liIndex = 0;\r\n                            };\r\n                        };\r\n                    };\r\n                }, 250);\r\n            } else {\r\n                let copyText = newLetterData[i].letterContent;\r\n                let enterText = document.querySelector('.textbox');\r\n                enterText.value = copyText;\r\n            };\r\n        };\r\n\r\n        // 작성자 추가 기능\r\n        function enterAuthor(i, newLetterData) {\r\n            let copyAuthor = `${newLetterData[i].letterWriter}`;\r\n            let enterAuthor = document.querySelector('.author');\r\n            enterAuthor.value = copyAuthor;\r\n        };\r\n\r\n        // 스티커 추가 기능\r\n        function attach(i, checkTyping, newLetterData) {\r\n            function setTranslate(xPos, yPos, el) {\r\n                el.style.transform = \"translate3d(\" + xPos + \"px, \" + yPos + \"px, 0)\";\r\n            };\r\n            let copyStrickerArray = newLetterData[i].sticker;\r\n            for (let i = 0; i < copyStrickerArray.length; i++) {\r\n                let item = document.createElement('div');\r\n                let stage = document.querySelector('.letter_textarea');\r\n                item.setAttribute('id', '_' + copyStrickerArray[i].stickerId);\r\n                item.setAttribute('class', 'item' + copyStrickerArray[i].stickerIcon);\r\n                stage.appendChild(item);\r\n                setTranslate(Math.round(Number(copyStrickerArray[i].stickerX)), Math.round((Number(copyStrickerArray[i].stickerY))), item);\r\n            };\r\n            enterDesc(i, checkTyping, newLetterData);\r\n            enterAuthor(i, newLetterData);\r\n        };\r\n\r\n        // 편지 열기 기능(수정 중)\r\n        async function openLetter(i) {\r\n            setRender(i);\r\n            dispatch({ type: 'CHANGE_ISSHAREBT', data: false });\r\n            let now = new Date().getTime();\r\n            let distance = userData.openDate - now;\r\n            if (distance < 0) {\r\n                // if (distance <= 0) {\r\n                dispatch({ type: 'CHANGE_ISLETTER', data: true });\r\n                setSlickPageNum(i);\r\n                await RequestThisLetterData(i);\r\n            } else {\r\n                dispatch({ type: 'CHANGE_ISNOTYETLETTER', data: true });\r\n            };\r\n        };\r\n\r\n        // 편지 정보 요청 기능(수정 중)\r\n        async function RequestThisLetterData(i) {\r\n            let newEachLetter = null;\r\n            if (letterData[i].userId === '') {\r\n                let eachLetter = {};\r\n                await fetch(`${process.env.REACT_APP_LETTER_DATA}${String(letterData[i].letterId)}`, {\r\n                    method: 'GET',\r\n                    mode: 'cors',\r\n                    cache: 'no-cache',\r\n                    credentials: 'same-origin',\r\n                    headers: {\r\n                        'Content-Type': 'application/json'\r\n                    }\r\n                })\r\n                    .then(res => {\r\n                        if (!res.ok) {\r\n                            throw new Error();\r\n                        };\r\n                        return res.json();\r\n                    })\r\n                    .then((data) => {\r\n                        data.letterReadYn = true;\r\n                        newEachLetter = Object.assign(eachLetter, data);\r\n                        stickerSum(i, newEachLetter);\r\n                    })\r\n                    .catch((error) => {\r\n                        alert('편지 내용을 정상적으로 받아오지 못했습니다. 다시 편지를 열어주세요.');\r\n                        dispatch({ type: 'CHANGE_ISLETTER', data: false });\r\n                    });\r\n            };\r\n            checkLoad(i, letterData);\r\n        };\r\n\r\n        // 편지 정보와 스티커 정보를 병합하는 기능\r\n        async function stickerSum(i, newEachLetter) {\r\n            const newLetterData = [...letterData];\r\n            const originalCheckTyping = letterData[i].letterReadYn;\r\n            await fetch(`${process.env.REACT_APP_STICKER_DATA}${String(letterData[i].letterId)}`, {\r\n                method: 'GET',\r\n                mode: 'cors',\r\n                cache: 'no-cache',\r\n                credentials: 'same-origin',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            })\r\n                .then(res => {\r\n                    if (!res.ok) {\r\n                        throw new Error();\r\n                    };\r\n                    return res.json();\r\n                })\r\n                .then((data) => {\r\n                    newEachLetter.sticker = data;\r\n                    newLetterData[i] = newEachLetter;\r\n                    dispatch({ type: 'CHANGE_LETTERDATA', data: newLetterData });\r\n                    checkLoad(i, newLetterData, originalCheckTyping);\r\n                })\r\n                .catch((error) => {\r\n                    alert('편지 내 스티커 정보를 정상적으로 받아오지 못했습니다. 다시 편지를 열어주세요.');\r\n                    dispatch({ type: 'CHANGE_ISLETTER', data: false });\r\n                });\r\n        };\r\n\r\n        // 편지지 로드 확인 기능\r\n        async function checkLoad(i, newLetterData, originalCheckTyping) {\r\n            let src = newLetterData[i].letterPaper.replace(/^url\\(['\"](.+)['\"]\\)/, '$1');\r\n            let image = new Image();\r\n            image.addEventListener('load', async function () {\r\n                dispatch({ type: 'CHANGE_ISIMAGEPRELOAD', data: false });\r\n                let checkTyping = originalCheckTyping;\r\n                await changeLetterStyle(i, newLetterData);\r\n                setTimeout(() => {\r\n                    attach(i, checkTyping, newLetterData);\r\n                }, 100);\r\n            });\r\n            image.src = src;\r\n        };\r\n\r\n        let settings = {\r\n            initialSlide: slickPage,\r\n            draggable: false,\r\n            swipe: true,\r\n            arrows: false,\r\n            dots: true,\r\n            infinite: true,\r\n            speed: 1250,\r\n            slidesToShow: 1,\r\n            slidesToScroll: 1\r\n        };\r\n\r\n        // (랜더링 직후) 편지 배열 표현 기능\r\n        useEffect(() => {\r\n            const list = [];\r\n            const list2 = [];\r\n            const list3 = [];\r\n            const list4 = [];\r\n\r\n            if (letterData.length === 0) {\r\n                setList(<span><div className='letterEmptyIcon'></div><span>아직 편지가</span><br></br><br></br><span>도착하지 않았어요.</span></span>);\r\n                setList2(<span><div className='letterEmptyIcon'></div><span>아직 편지가</span><br></br><br></br><span>도착하지 않았어요.</span></span>);\r\n                setList3(<span><div className='letterEmptyIcon'></div><span>아직 편지가</span><br></br><br></br><span>도착하지 않았어요.</span></span>);\r\n                setList4(<span><div className='letterEmptyIcon'></div><span>아직 편지가</span><br></br><br></br><span>도착하지 않았어요.</span></span>);\r\n            } else if (letterData.length <= 9) {\r\n                for (let i = 0; i < letterData.length; i++) {\r\n                    let li = letterData[i];\r\n                    list.push(React.Children.toArray(<button key={li.letterId} data-id={li.letterId} className={\"letter\" + li.letterIcon} onClick={() => { openLetter(i) }}><div className={li.letterReadYn ? 'new_letter_icon_open' : 'new_letter_icon'}></div></button>));\r\n                    setList(list);\r\n                    setList2(<span><div className='letterEmptyIcon'></div><span>아직 편지가</span><br></br><br></br><span>도착하지 않았어요.</span></span>);\r\n                    setList3(<span><div className='letterEmptyIcon'></div><span>아직 편지가</span><br></br><br></br><span>도착하지 않았어요.</span></span>);\r\n                    setList4(<span><div className='letterEmptyIcon'></div><span>아직 편지가</span><br></br><br></br><span>도착하지 않았어요.</span></span>);\r\n                };\r\n            } else if (letterData.length <= 18) {\r\n                for (let i = 0; i < 9; i++) {\r\n                    let li = letterData[i];\r\n                    list.push(React.Children.toArray(<button key={li.letterId} data-id={li.letterId} className={\"letter\" + li.letterIcon} onClick={() => { openLetter(i) }}><div className={li.letterReadYn ? 'new_letter_icon_open' : 'new_letter_icon'}></div></button>));\r\n                    setList(list);\r\n                };\r\n                for (let i = 9; i < letterData.length; i++) {\r\n                    let li = letterData[i];\r\n                    list2.push(React.Children.toArray(<button key={li.letterId} data-id={li.letterId} className={\"letter\" + li.letterIcon} onClick={() => { openLetter(i) }}><div className={li.letterReadYn ? 'new_letter_icon_open' : 'new_letter_icon'}></div></button>));\r\n                    setList2(list2);\r\n                    setList3(<span><div className='letterEmptyIcon'></div><span>아직 편지가</span><br></br><br></br><span>도착하지 않았어요.</span></span>);\r\n                    setList4(<span><div className='letterEmptyIcon'></div><span>아직 편지가</span><br></br><br></br><span>도착하지 않았어요.</span></span>);\r\n                };\r\n            } else if (letterData.length <= 27) {\r\n                for (let i = 0; i < 9; i++) {\r\n                    let li = letterData[i];\r\n                    list.push(React.Children.toArray(<button key={li.letterId} data-id={li.letterId} className={\"letter\" + li.letterIcon} onClick={() => { openLetter(i) }}><div className={li.letterReadYn ? 'new_letter_icon_open' : 'new_letter_icon'}></div></button>));\r\n                    setList(list);\r\n                };\r\n                for (let i = 9; i < 18; i++) {\r\n                    let li = letterData[i];\r\n                    list2.push(React.Children.toArray(<button key={li.letterId} data-id={li.letterId} className={\"letter\" + li.letterIcon} onClick={() => { openLetter(i) }}><div className={li.letterReadYn ? 'new_letter_icon_open' : 'new_letter_icon'}></div></button>));\r\n                    setList2(list2);\r\n                };\r\n                for (let i = 18; i < letterData.length; i++) {\r\n                    let li = letterData[i];\r\n                    list3.push(React.Children.toArray(<button key={li.letterId} data-id={li.letterId} className={\"letter\" + li.letterIcon} onClick={() => { openLetter(i) }}><div className={li.letterReadYn ? 'new_letter_icon_open' : 'new_letter_icon'}></div></button>));\r\n                    setList3(list3);\r\n                    setList4(<span><div className='letterEmptyIcon'></div><span>아직 편지가</span><br></br><br></br><span>도착하지 않았어요.</span></span>);\r\n                };\r\n            } else if (letterData.length <= 36) {\r\n                for (let i = 0; i < 9; i++) {\r\n                    let li = letterData[i];\r\n                    list.push(React.Children.toArray(<button key={li.letterId} data-id={li.letterId} className={\"letter\" + li.letterIcon} onClick={() => { openLetter(i) }}><div className={li.letterReadYn ? 'new_letter_icon_open' : 'new_letter_icon'}></div></button>));\r\n                    setList(list);\r\n                };\r\n                for (let i = 9; i < 18; i++) {\r\n                    let li = letterData[i];\r\n                    list2.push(React.Children.toArray(<button key={li.letterId} data-id={li.letterId} className={\"letter\" + li.letterIcon} onClick={() => { openLetter(i) }}><div className={li.letterReadYn ? 'new_letter_icon_open' : 'new_letter_icon'}></div></button>));\r\n                    setList2(list2);\r\n                };\r\n                for (let i = 18; i < 27; i++) {\r\n                    let li = letterData[i];\r\n                    list3.push(React.Children.toArray(<button key={li.letterId} data-id={li.letterId} className={\"letter\" + li.letterIcon} onClick={() => { openLetter(i) }}><div className={li.letterReadYn ? 'new_letter_icon_open' : 'new_letter_icon'}></div></button>));\r\n                    setList3(list3);\r\n                };\r\n                for (let i = 27; i < letterData.length; i++) {\r\n                    let li = letterData[i];\r\n                    list4.push(React.Children.toArray(<button key={li.letterId} data-id={li.letterId} className={\"letter\" + li.letterIcon} onClick={() => { openLetter(i) }}><div className={li.letterReadYn ? 'new_letter_icon_open' : 'new_letter_icon'}></div></button>));\r\n                    setList4(list4);\r\n                };\r\n            } else {\r\n            };\r\n        }, []);\r\n\r\n\r\n        // (팝업) 편지지\r\n        function Letter() {\r\n            // 카카오 애드 관련 기능\r\n            useEffect(() => {\r\n                let ins = document.createElement('ins');\r\n                let scr = document.createElement('script');\r\n                ins.className = 'kakao_ad_area';\r\n                ins.style = \"display:none; width:100%;\";\r\n                scr.async = 'true';\r\n                scr.type = \"text/javascript\";\r\n                scr.src = \"//t1.daumcdn.net/kas/static/ba.min.js\";\r\n                ins.setAttribute('data-ad-width', '320');\r\n                ins.setAttribute('data-ad-height', '100');\r\n                ins.setAttribute('data-ad-unit', 'DAN-wwtMTOs6oLrop9iK');\r\n                document.querySelector('.adfit').appendChild(ins);\r\n                document.querySelector('.adfit').appendChild(scr);\r\n            }, [])\r\n            return (\r\n                <React.Fragment>\r\n                    <div className={isLetter ? 'letter_outContainer' : 'letter_outContainer_fade'}>\r\n                        <div className='letter_textarea_top'>\r\n                            <div className='letter_textarea_author_title'>From.</div>\r\n                            <input type='text' className='author' value={''} readOnly></input>\r\n                            <div className='letter_icon_box'>\r\n                                <div className='letter_block' onClick={() => {\r\n                                    dispatch({ type: 'CHANGE_ISLETTERBLOCKCONFIRM', data: true });\r\n                                    dispatch({ type: 'CHANGE_ISIMAGEPRELOAD', data: !isImagePreload });\r\n                                    resetLetterStyle();\r\n                                }}></div>\r\n                                <div className='letter_close' onClick={() => {\r\n                                    dispatch({ type: 'CHANGE_ISLETTER', data: false });\r\n                                    dispatch({ type: 'CHANGE_ISIMAGEPRELOAD', data: !isImagePreload });\r\n                                    resetLetterStyle();\r\n                                }}></div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"letter_textarea\">\r\n                            <textarea style={setStyle} className=\"textbox\" value={''} readOnly>\r\n                            </textarea>\r\n                            <span className={isImagePreload ? 'preloading' : 'preloading_fade'}>편지를 불러오고 있습니다...</span>\r\n                        </div>\r\n                        <br></br>\r\n                        <div className=\"adfit\"></div>\r\n                        <div className='googleAdsense'>\r\n                            <Adsense\r\n                                client={process.env.REACT_APP_GOOGLE_ADSENSE}\r\n                                slot={process.env.REACT_APP_GOOGLE_ADSENSE_SLOT}\r\n                                style={{ display: 'block' }}\r\n                                layout=\"in-article\"\r\n                                format=\"fluid\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </React.Fragment>\r\n            );\r\n        };\r\n\r\n        // (팝업) 편지를 읽지 못함을 알리는 안내\r\n        function NotYetLetter() {\r\n            return (\r\n                <React.Fragment>\r\n                    <div className={isNotYetLetter ? \"isNotYetLetter\" : \"isNotYetLetter_fade\"}>\r\n                        <div className='isNotYetLetter_outContainer'>\r\n                            <p className='isNotYetLetter_title'>지구에서 편지가</p>\r\n                            <p className='isNotYetLetter_title'>오고 있습니다.</p>\r\n                            <p className='isNotYetLetter_p'>남은 시간이 모두 지나면</p>\r\n                            <p className='isNotYetLetter_p'>열어 볼 수 있어요.</p>\r\n                            <div className='isNotYetLetter_button_signOut' onClick={() => {\r\n                                dispatch({ type: 'CHANGE_ISNOTYETLETTER', data: false });\r\n                            }}>확인</div>\r\n                        </div>\r\n                    </div>\r\n                </React.Fragment>\r\n            );\r\n        };\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <NotYetLetter></NotYetLetter>\r\n                <LetterBlockConfirm></LetterBlockConfirm>\r\n                <Letter></Letter>\r\n                <div className='letterBox_outContainer'>\r\n                    <Slider {...settings}>\r\n                        <div className='letterBox_innerContainer'>\r\n                            <div className='letterBox_innerContainer_div'>{list}\r\n                            </div>\r\n                        </div>\r\n                        <div className='letterBox_innerContainer'>\r\n                            <div className='letterBox_innerContainer_div'>{list2}\r\n                            </div>\r\n                        </div>\r\n                        <div className='letterBox_innerContainer'>\r\n                            <div className='letterBox_innerContainer_div'>{list3}\r\n                            </div>\r\n                        </div>\r\n                        <div className='letterBox_innerContainer'>\r\n                            <div className='letterBox_innerContainer_div'>{list4}\r\n                            </div>\r\n                        </div>\r\n                    </Slider>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <ShareBt></ShareBt>\r\n            {isNamePage ? <ShowMemberInf></ShowMemberInf> : <SetSignal></SetSignal>}\r\n            {isRestart ? <Restart></Restart> : <span></span>}\r\n            {isNamePage ? <LetterBox></LetterBox> : <span></span>}\r\n            <CreateNameURL></CreateNameURL>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default InnerPage;","C:\\Users\\blue_\\OneDrive\\바탕 화면\\GitHub\\soso-web\\main\\src\\components\\Menu.js",[],[],"C:\\Users\\blue_\\OneDrive\\바탕 화면\\GitHub\\soso-web\\main\\src\\components\\ShareBt.js",["97"],[],"import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport './ShareBt.css';\r\n\r\nfunction ShareBt() {\r\n    const dispatch = useDispatch();\r\n    const userData = useSelector((state) => state.userData);\r\n    const isShare = useSelector((state) => state.isShare);\r\n    const isShareBt = useSelector((state) => state.isShareBt);\r\n    const userID = useSelector((state) => state.userID);\r\n    const ShareUserID = useSelector((state) => state.ShareUserID);\r\n    const isPopUpCopyLink = useSelector((state) => state.isPopUpCopyLink);\r\n\r\n    useEffect(() => {\r\n        if (userData.openDate !== 875286000000 && userData.openDate !== 0) {\r\n            dispatch({ type: 'CHANGE_ISSHARE', data: !isShare });\r\n        };\r\n    }, [dispatch, userData.openDate]);\r\n\r\n    const shareBasicURL = `${process.env.REACT_APP_BASIC_URL2}userID=${ShareUserID}`;\r\n    const basicURL = `${process.env.REACT_APP_BASIC_URL}`;\r\n    const image_share = 'https://github.com/Lee-Seung-Wook/Angelo-s_Library/blob/main/lib/logo/logo.png?raw=true';\r\n    const title = 'PL@TER - 기다려지는 소식';\r\n\r\n    // 카카오톡 공유 기능\r\n    function kakaoShare() {\r\n        const KakaoJS = process.env.REACT_APP_JAVASCRIPT_KEY\r\n        if (!window.Kakao.isInitialized()) {\r\n            window.Kakao.init(KakaoJS);\r\n        };\r\n        window.Kakao.Share.sendDefault({\r\n            objectType: 'feed',\r\n            content: {\r\n                title: 'PL@TER',\r\n                description: '기다려지는 소식',\r\n                imageUrl: image_share,\r\n                link: {\r\n                    mobileWebUrl: shareBasicURL,\r\n                    webUrl: shareBasicURL,\r\n                },\r\n            },\r\n            buttons: [\r\n                {\r\n                    title: '편지 보내기',\r\n                    link: {\r\n                        mobileWebUrl: shareBasicURL,\r\n                        webUrl: shareBasicURL,\r\n                    },\r\n                },\r\n                {\r\n                    title: '행성 만들기',\r\n                    link: {\r\n                        mobileWebUrl: basicURL,\r\n                        webUrl: basicURL,\r\n                    },\r\n                },\r\n            ],\r\n            installTalk: true,\r\n        });\r\n    };\r\n\r\n    // 트위터 공유 기능\r\n    function shareTwitter() {\r\n        let url = encodeURIComponent(shareBasicURL);\r\n        window.open(`https://twitter.com/intent/tweet?url=${url}&text=${title}`, '소소한 프로젝트', 'width=400, height=400');\r\n    };\r\n\r\n    // 페이스북 공유 기능\r\n    function shareFacebook() {\r\n        window.open('https://www.facebook.com/sharer/sharer.php?u='\r\n            + encodeURIComponent(shareBasicURL)\r\n            + '&t=' + encodeURIComponent(title),\r\n            'facebooksharedialog',\r\n            'menubar=no, toolbar=no, resizable=yes, scrollbars=yes, height=400, width=400');\r\n    };\r\n\r\n    // 공유 가능 사용자 아이디 발급 기능\r\n    function RequestShareUserID(userID) {\r\n        fetch(`${process.env.REACT_APP_SHARE_USERID}${userID}`, {\r\n            method: 'GET',\r\n            mode: 'cors',\r\n            cache: 'no-cache',\r\n            credentials: 'same-origin',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n            .then(res => {\r\n                if (!res.ok) {\r\n                    throw new Error();\r\n                };\r\n                return res.json();\r\n            })\r\n            .then((data) => {\r\n                dispatch({ type: 'CHANGE_SHAREUSERID', data: String(data) });\r\n            })\r\n            .catch((error) => {\r\n                alert('공유 가능한 사용자 주소를 정상적으로 받아오지 못했습니다. 공유 버튼을 다시 눌러주세요.');\r\n            });\r\n    };\r\n\r\n    // 공유 URL 복사 기능\r\n    function urlCopy() {\r\n        let Dummy_Tag = document.createElement(\"input\");\r\n        let Current_URL = `${process.env.REACT_APP_BASIC_URL2}userID=${ShareUserID}`;\r\n        document.body.appendChild(Dummy_Tag);\r\n        Dummy_Tag.value = Current_URL;\r\n        Dummy_Tag.select();\r\n        document.execCommand(\"copy\");\r\n        document.body.removeChild(Dummy_Tag);\r\n        dispatch({ type: 'CHANGE_ISPOPUPCOPYLINK', data: !isPopUpCopyLink });\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className={isShare ? 'shareButton_outContainer_active' : 'shareButton_outContainer'} onClick={() => {\r\n                RequestShareUserID(userID);\r\n                dispatch({ type: 'CHANGE_ISSHAREBT', data: !isShareBt });\r\n            }}>\r\n                <img className='shareButton_share' alt='share' src='https://github.com/Lee-Seung-Wook/Angelo-s_Library/blob/main/lib/icon/share.png?raw=true'></img>\r\n            </div>\r\n            <div className='shareButton_innerContainer'>\r\n                <img className={isShareBt ? 'shareButton_share_btn_url_active' : 'shareButton_share_btn'} alt='url' src='https://github.com/Lee-Seung-Wook/Angelo-s_Library/blob/main/lib/icon/copy_link.png?raw=true' onClick={urlCopy}></img>\r\n                <img className={isShareBt ? 'shareButton_share_btn_kakao_active' : 'shareButton_share_btn'} alt='kakao' src='https://github.com/Lee-Seung-Wook/Angelo-s_Library/blob/main/lib/icon/kakao.png?raw=true' onClick={kakaoShare}></img>\r\n                <img className={isShareBt ? 'shareButton_share_btn_facebook_active' : 'shareButton_share_btn'} alt='facebook' src='https://github.com/Lee-Seung-Wook/Angelo-s_Library/blob/main/lib/icon/facebook.png?raw=true' onClick={shareFacebook}></img>\r\n                <img className={isShareBt ? 'shareButton_share_btn_twitter_active' : 'shareButton_share_btn'} alt='twitter' src='https://github.com/Lee-Seung-Wook/Angelo-s_Library/blob/main/lib/icon/twitter.png?raw=true' onClick={shareTwitter}></img>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default ShareBt;","C:\\Users\\blue_\\OneDrive\\바탕 화면\\GitHub\\soso-web\\main\\src\\components\\Restart.js",[],[],"C:\\Users\\blue_\\OneDrive\\바탕 화면\\GitHub\\soso-web\\main\\src\\components\\Refresh.js",[],[],{"ruleId":"98","severity":1,"message":"99","line":1,"column":28,"nodeType":"100","messageId":"101","endLine":1,"endColumn":36},{"ruleId":"98","severity":1,"message":"102","line":20,"column":9,"nodeType":"100","messageId":"101","endLine":20,"endColumn":10},{"ruleId":"103","severity":1,"message":"104","line":53,"column":6,"nodeType":"105","endLine":53,"endColumn":25,"suggestions":"106"},{"ruleId":"98","severity":1,"message":"107","line":10,"column":10,"nodeType":"100","messageId":"101","endLine":10,"endColumn":17},{"ruleId":"98","severity":1,"message":"108","line":10,"column":19,"nodeType":"100","messageId":"101","endLine":10,"endColumn":29},{"ruleId":"103","severity":1,"message":"109","line":39,"column":6,"nodeType":"105","endLine":39,"endColumn":16,"suggestions":"110"},{"ruleId":"103","severity":1,"message":"111","line":53,"column":8,"nodeType":"105","endLine":53,"endColumn":27,"suggestions":"112"},{"ruleId":"103","severity":1,"message":"113","line":193,"column":8,"nodeType":"105","endLine":193,"endColumn":10,"suggestions":"114"},{"ruleId":"103","severity":1,"message":"115","line":127,"column":8,"nodeType":"105","endLine":127,"endColumn":10,"suggestions":"116"},{"ruleId":"103","severity":1,"message":"117","line":575,"column":12,"nodeType":"105","endLine":575,"endColumn":14,"suggestions":"118"},{"ruleId":"103","severity":1,"message":"119","line":743,"column":8,"nodeType":"105","endLine":743,"endColumn":43,"suggestions":"120"},{"ruleId":"103","severity":1,"message":"121","line":766,"column":8,"nodeType":"105","endLine":766,"endColumn":19,"suggestions":"122"},{"ruleId":"103","severity":1,"message":"123","line":397,"column":12,"nodeType":"105","endLine":397,"endColumn":14,"suggestions":"124"},{"ruleId":"98","severity":1,"message":"125","line":528,"column":25,"nodeType":"100","messageId":"101","endLine":528,"endColumn":39},{"ruleId":"103","severity":1,"message":"126","line":771,"column":12,"nodeType":"105","endLine":771,"endColumn":14,"suggestions":"127"},{"ruleId":"103","severity":1,"message":"128","line":18,"column":8,"nodeType":"105","endLine":18,"endColumn":37,"suggestions":"129"},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'a' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'isFirstInfo'. Either include them or remove the dependency array.","ArrayExpression",["130"],"'render1' is assigned a value but never used.","'setRender1' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'isStory', 'navigater', and 'userID'. Either include them or remove the dependency array.",["131"],"React Hook useEffect has missing dependencies: 'dispatch' and 'isSecondInfo'. Either include them or remove the dependency array.",["132"],"React Hook useEffect has missing dependencies: 'RequestUserData', 'dispatch', 'name', 'nameErro', and 'navigater'. Either include them or remove the dependency array.",["133"],"React Hook useEffect has a missing dependency: 'stickerNUM'. Either include it or remove the dependency array.",["134"],"React Hook useEffect has a missing dependency: 'checkLetterData'. Either include it or remove the dependency array.",["135"],"React Hook useEffect has missing dependencies: 'dispatch' and 'firstCheck'. Either include them or remove the dependency array.",["136"],"React Hook useEffect has missing dependencies: 'dispatch' and 'isThirdInfo'. Either include them or remove the dependency array.",["137"],"React Hook useEffect has a missing dependency: 'setDDay'. Either include it or remove the dependency array.",["138"],"'arraySplitData' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'openLetter'. Either include it or remove the dependency array.",["139"],"React Hook useEffect has a missing dependency: 'isShare'. Either include it or remove the dependency array.",["140"],{"desc":"141","fix":"142"},{"desc":"143","fix":"144"},{"desc":"145","fix":"146"},{"desc":"147","fix":"148"},{"desc":"149","fix":"150"},{"desc":"151","fix":"152"},{"desc":"153","fix":"154"},{"desc":"155","fix":"156"},{"desc":"157","fix":"158"},{"desc":"159","fix":"160"},{"desc":"161","fix":"162"},"Update the dependencies array to be: [dispatch, isFirstInfo, navigater, userID]",{"range":"163","text":"164"},"Update the dependencies array to be: [dispatch, isStory, navigater, userID]",{"range":"165","text":"166"},"Update the dependencies array to be: [dispatch, isSecondInfo, navigater, userID]",{"range":"167","text":"168"},"Update the dependencies array to be: [RequestUserData, dispatch, name, nameErro, navigater]",{"range":"169","text":"170"},"Update the dependencies array to be: [stickerNUM]",{"range":"171","text":"172"},"Update the dependencies array to be: [checkLetterData]",{"range":"173","text":"174"},"Update the dependencies array to be: [dispatch, firstCheck, openUserOpenDate, userLetterCount]",{"range":"175","text":"176"},"Update the dependencies array to be: [dispatch, get_query, isThirdInfo]",{"range":"177","text":"178"},"Update the dependencies array to be: [setDDay]",{"range":"179","text":"180"},"Update the dependencies array to be: [openLetter]",{"range":"181","text":"182"},"Update the dependencies array to be: [dispatch, isShare, userData.openDate]",{"range":"183","text":"184"},[1962,1981],"[dispatch, isFirstInfo, navigater, userID]",[1237,1247],"[dispatch, isStory, navigater, userID]",[2091,2110],"[dispatch, isSecondInfo, navigater, userID]",[7137,7139],"[RequestUserData, dispatch, name, nameErro, navigater]",[4797,4799],"[stickerNUM]",[27410,27412],"[checkLetterData]",[34158,34193],"[dispatch, firstCheck, openUserOpenDate, userLetterCount]",[34934,34945],"[dispatch, get_query, isThirdInfo]",[19798,19800],"[setDDay]",[39017,39019],"[openLetter]",[763,792],"[dispatch, isShare, userData.openDate]"]